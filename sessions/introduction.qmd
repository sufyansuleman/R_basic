# Overview of R and RStudio {#sec-introduction}

```{r setup}
#| include: false
#| eval: true
source(here::here("R/functions.R"))
source(here::here("R/load-packages.R"))
```

## Introduction to R

R is a powerful programming language primarily used for statistical
computing and graphics. It's a popular choice among statisticians, data
analysts, and researchers for data analysis, statistical modeling, and
data visualization. In today's research landscape, the ability to
analyze data is an essential skill regardless of your scientific field,
whether it's health and medical science, other life sciences, physical
sciences, technology, business or humanities. This is because each
experiment and observation generates data that must be processed,
visualized and interpreted to facilitate informed decision-making and
enhance human understanding. In this regard, R emerges as an excellent
tool for data analysis, offering a multitude of benefits that make it a
preferred choice among various programming languages. In this chapter,
we will learn about the key features of R and RStudio, and how to
install and navigate the RStudio interface.

### Key Features of R:

R is an excellent option for data analysis, and there are several
reasons to choose this software:

**Comprehensive**: - R provides a wide range of statistical and
graphical techniques needed for data handling, analysis and
visualization, and more.

**Open Source**: - Most importantly, as a free, open-source software, R
is accessible to anyone and can be customized to meet specific research
needs.

**Community Support**: - R has a vast community of users and developers
who contribute to its growth by sharing code, creating packages, and
providing support through forums and social media platforms (That's also
free, isn't it amazing!!).

**Versatility**: - R is versatile and can handle data from various
formats, including CSV, Excel, SQL, and more.

**Integration**: - R can be integrated with other software and
programming languages, such as Python, C++, and Java, to enhance its
capabilities.

**Visualization**: - R excels at data visualization, providing numerous
options for creating graphs, charts, and plots that can help to better
understand and communicate data insights.

**Extensibility**: - R can be extended with over 18,000 packages
available on CRAN, which cover a wide range of disciplines and
applications.

## Introduction to RStudio

RStudio is an integrated development environment (IDE) for R. It
provides a user-friendly interface to R, making it easier for
individuals to interact with and learn R. Lets understand this with and
example, R and RStudio are like a car and its dashboard respectively. R
is the engine that powers your data analysis tasks, while RStudio is the
dashboard that helps you interact with that engine more easily.

### R: The Engine

R is a programming language designed for statistical analysis, graphics,
and data visualization. When you write and run a script in R, the R
software processes your commands and returns the results. However, R by
itself doesn't provide a very user-friendly interface.

### RStudio: The Dashboard

RStudio is an Integrated Development Environment (IDE) for R. It
provides a user-friendly interface to interact with R. It doesn't
replace R, but rather, it complements R to make data analysis tasks
easier and more interactive.

Here's how they work together:

**Writing Code**: - In RStudio, you write your R code in an R script or
R Markdown file (we will learn shortly). This is like having a notepad
where you write down the instructions you want the R engine to execute.

**Running Code**: - Once you've written your code, you can run it within
RStudio. When you do this, RStudio sends your code to the R engine for
execution.

**Viewing Results**: - The results of your code are then displayed
within RStudio, either in the console (we will learn shortly), in plots,
or within your R Markdown. document. **Interactive Features**: - RStudio
provides various interactive features like the ability to inspect data
objects, view plots, manage your R packages, and even debug your code.

**Additional Tools**: - RStudio also provides additional tools that make
working with R easier, such as auto-completion of code, integrated help
and documentation, and support for version control systems like Git.
**Learning and Debugging**: - With its user-friendly interface, RStudio
makes it easier to learn R and debug your code. It provides helpful
error messages and debugging tools to help you find and fix errors in
your code.

In summary, R is the core engine where all your data analysis happens,
and RStudio is the friendly dashboard that helps you interact with R
efficiently. By using RStudio, you can focus more on your data analysis
tasks and less on managing the technicalities of the R language.

## Installing R and RStudio

### Installing R

To start using R, you first need to install it on your computer. Here's
how to do it:

1.  **Visit the CRAN website**: Go to the [Official CRAN
    website](https://cran.r-project.org/) to download R. CRAN is the
    Comprehensive R Archive Network, which hosts the R software.

2.  **Choose your Operating System**: On the CRAN website, select the
    version of R suitable for your operating system (Linux, macOS, or
    Windows).

3.  **Download and Install for Windows**:

    -   If you're using Windows, click on "Download R for Windows."

    -   Select "install R for the first time" if this is your initial
        installation.

    -   Grant the installer administrative permissions if prompted.

    -   Choose your preferred language when asked.

        ![Select Language](../images/select_language.PNG)

    -   Follow the on-screen instructions. R is typically installed in
        the C drive, but you can choose a different location if you
        prefer.

    -   Complete the installation process.

        ![Installation Process](../images/installation_process.PNG)

    -   Click "Finish" upon completion.

        ![Setup Complete](../images/setup_complete.PNG)

    -   You'll find R in your start menu.

4.  **Verify Installation**: Once installed, R can be found in the start
    menu of your computer. However, we'll primarily use RStudio for
    interacting with R.

### Installing RStudio

RStudio provides a user-friendly interface for working with R. Here's
how to install it:

1.  **Visit the RStudio website**: Navigate to the [Official RStudio
    website](https://posit.co/download/rstudio-desktop/) to download
    RStudio.

2.  **Download and Install**: Scroll down and click on the blue button
    that says `DOWNLOAD RSTUDIO DESKTOP FOR WINDOWS` / OR Scroll down
    more and Select the version of RStudio that matches your operating
    system and follow the installation instructions.
    ![Rstudio](../images/posit-page.PNG)

3.  **Accessing RStudio**: After installation, you can find RStudio in
    your computer's start menu. Open RStudio by navigating to the start
    button (or searching in the search bar) and selecting the RStudio
    app.

4.  **Integration with R**: Now that both R and RStudio are installed,
    they will work together, as explained in Section 1.2.

This setup ensures you have both R and RStudio ready for use, providing
a complete environment for your R programming journey.

## Navigating the RStudio Interface

When you open RStudio it looks like this

![RStudio Interface on Start](../images/RStudio_interface.PNG)

-   **RStudio's interface comprises four main panes:**

**Console Pane**: The console is the area where R code is run (we will
work in console shortly, in Section 2). By default, it is located at the
bottom left of the screen, but this can be adjusted in the settings.
However, we will keep it in its default position for this demonstration.

![Console](../images/Console.PNG)

**Script Pane**: Compose and preserve scripts of R code, which will be
your primary works pace. Here, you can perform various tasks such as
opening files, writing and executing code, and saving your files,
including R scripts and R Markdown documents. Additionally, this area
provides the ability to inspect your data by opening the objects you
have created. Normally this located at top left of the interface. We
will also learn how to open new files write code and save them.

::: callout-note
You won't see the Script pane at this moment, don't worry. It will
appear once you open a file or script.
:::

![Script pane](../images/Script_pane.PNG)

**Environment/History Pane**: The Environment pane in RStudio displays
the current working environment, listing data objects, variables, and
functions in the R Section. It provides an easy way to track, interact
with, and manage data sets and variables, as well as options to import
data, clear the environment, and search for specific variables,
simplifying the data analysis process. This is located at top right of
the interface. We will soon see how the objects appear in the
Environment pane, and how can we interact with them.

![Environment pane](../images/Env_pane.PNG)

**Files/Plots/Packages/Help Pane**: Access files, view plots, manage
packages, and access R help documentation. The Files pane in RStudio
helps you navigate and manage project files directly within the
interface. The History pane, on the other hand, logs your past R console
commands, making it easy to review and re-run them as needed. These
features streamline your workflow and enhance reproducibility.

![Files pane](../images/Files_pane.PNG)

## Checking Your Installation

Please launch RStudio on your computer. Observe the interface - you
should see it divided into three or four panes. This is the standard
layout of RStudio.

-   If you can see the RStudio interface as described, you're ready to
    proceed to the next section.
-   If you do not see the RStudio interface or the panes are not
    visible, please revisit the previous sections to ensure that R and
    RStudio are correctly installed on your system.

## Common Troubleshooting Tips

If you encounter issues, here are some tips:

-   Ensure that you have the latest version of R and RStudio. You can
    check the latest version of R [here](https://cran.r-project.org/)
    and the latest version of RStudio
    [here](https://posit.co/downloads/).
-   Check that your script syntax is correct, especially missing
    parentheses or commas.
-   Use the help() function to understand more about R functions and
    their usage.
-   Use the RStudio IDE's built-in help and documentation features.

## Community and Support

The R community is vibrant and supportive. Engage with it through:

Stack Overflow for programming questions and answers
[stackoverflow](https://stackoverflow.com/questions/tagged/r) RStudio
Community for RStudio specific questions [RStudio
Community](https://community.rstudio.com/) R-bloggers for articles and
tutorials from various R bloggers
[R-bloggers](https://www.r-bloggers.com/) Twitter for the latest news
and updates [Twitter](https://twitter.com/rstats)
