{
  "hash": "9c23030fb7086add236b074bee592a8c",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n---\n\n\n# Data Frames and Lists {#sec-df-lists}\n\n\n\n\n\n\n\n\n\n## Introduction to Data Frames\n\nData frames are one of the most important data structures in R, especially for data analysis and statistical modeling. They are used to store tabular data, which is data that's organized in rows and columns, much like a spreadsheet or a database table. Each `column` in a data frame represents a unique `variable`, and each `row `represents an unique  `observation`.\n\n### Why Do We Need Data Frames?\n\n1. **Organized Storage**: Data frames allow for the organized storage of data where you can have different types of variables (e.g., numeric, character, logical) all in one place.\n2. **Easy Manipulation**: They provide a structured way to manipulate data, making it easier to perform operations on groups of data.\n3. **Compatibility**: Many R functions and packages are designed to work with data frames, making them a standard for working with data in R.\n\n### How Does R Handle Data Frames?\n\n- **Column-Based Structure**: R stores data frames in a column-based structure, which makes it efficient to access and manipulate entire columns of data.\n- **Different Data Types**: Unlike matrices, data frames can have columns of different data types.\n- **Named Columns and Rows**: The columns and rows in a data frame can have names, which is useful for data indexing and retrieval.\n\n## Example of a dataframe\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n          Name    Color Price_Per_Pound   origin\n1        Apple      Red             1.2      USA\n2       Banana   Yellow             0.5 S Africa\n3       Cherry      Red             2.5    Japan\n4 Dragon fruit Pink-red             2.0    India\n5        Mango   Yellow             3.0 Pakistan\n```\n:::\n:::\n\nA dataframe of [5 rows Ã— 4 columns]\n\n\n## Working with Data Frames\n\nWorking with data frames in R is straightforward. You can:\n\n- **Create** a data frame using the `data.frame()` function.\n\n- **Access** columns using the `$` operator or by indexing with `[]`.\n\n- **Modify** data frames by adding or removing columns or rows.\n\n- **Subset** data frames based on conditions.\n\n\n**Create**\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(24, 27, 22),\n  Major = c(\"Biology\", \"Math\", \"Physics\"),\n  GPA = c(3.8, 3.2, 3.9)\n)\n\nstudents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Name Age   Major GPA\n1   Alice  24 Biology 3.8\n2     Bob  27    Math 3.2\n3 Charlie  22 Physics 3.9\n```\n:::\n:::\n\n\n**Access**\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents$Name # access the Names of the students\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n```\n:::\n:::\n\n\n:::{.callout-tip}\nWhen you press the dollar sign ($) while coding in R, a helpful autocomplete feature pops up. This tool suggests column names for you to choose from, which can be particularly useful when dealing with columns that have long names, reducing the risk of typos that could cause errors. To take advantage of this, simply scroll through the suggestions, select the desired column name, and then press Ctrl + Enter to execute the code. It's a convenient shortcut that can save time and avoid mistakes.\n:::\n\nCan you access the information from all other columns one by one ??\n\n**Modify**\nThe dollar sign ($) in R is used to access a column within a data frame. If you refer to a column name that doesn't exist, R will create a new column with that name and assign values to it, as demonstrated below.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding a new column\n\nstudents$Graduation_Year <- c(2022, 2023, 2022)\nstudents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Name Age   Major GPA Graduation_Year\n1   Alice  24 Biology 3.8            2022\n2     Bob  27    Math 3.2            2023\n3 Charlie  22 Physics 3.9            2022\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Removing a column, setting it to NULL will remove the column\nstudents$Age <- NULL\nstudents\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Name   Major GPA Graduation_Year\n1   Alice Biology 3.8            2022\n2     Bob    Math 3.2            2023\n3 Charlie Physics 3.9            2022\n```\n:::\n:::\n\n\n**Subset**\n\nThe `==` Operator\nThe equality operator == checks if the value on its left is equal to the value on its right and returns a logical/boolean value (TRUE if the values are equal, FALSE otherwise).\nIt's important to note that == is for comparison, while = is often used for assignment (though in R, <- is the conventional assignment operator).\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtering rows based on condition\nbiology_students <- subset(students, Major == \"Biology\")\nbiology_students\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Name   Major GPA Graduation_Year\n1 Alice Biology 3.8            2022\n```\n:::\n:::\n\n\n\n## Excercise 5\n\nCountries Analysis\n\n**Objective:**\nGain hands-on experience with creating, modifying, and querying data frames in R.\n\n**Background:**\nData frames are one of the most commonly used data structures in R. They are used to store tabular data and are similar to matrices but can contain different types of data.\n\n**Tasks:**\n\n1. **Create a Data Frame:**\n\n- Create a data frame named `countries_df` with the following columns: `Country`, `Continent`, `Population`, and `UN_Member` with following information.\n- Countries= Brazil, Sweden, India, Canada, Nigeria\n- Continent = South America, Europe, Asia, North America, Africa\n- Population_in_M = 212.6, 10.3, 1380, 37.7, 206\n- UN_Member = TRUE, TRUE, TRUE, TRUE, TRUE\n\n2. **Add New Information:**\n   - Add a new column to `countries_df` named `GDP_Per_Capita` (in USD).\n   - Populate this column with fictional or real GDP per capita figures for each country.\n\n3. **Data Cleanup:**\n   - Suppose you no longer need the `UN_Member` column. Remove this column from `countries_df`.\n\n5. **Analysis & Filtering:**\n   - Create a new data frame named `high_gdp_df` that only includes countries with a GDP per capita greater than $20,000.\n\n5. **Sorting:**\n   - Sort `high_gdp_df` in descending order based on the `GDP_Per_Capita` column.\n\n\n**Questions for Further Analysis:**\n\n1. Which continent is represented most among the countries with a high GDP per capita?\n2. Is there a correlation between the population of a country and its GDP per capita in your dataset? Hypothesize why this might be the case.\n\n\n:::{.callout-tip collapse=\"true\" title=\"Excercise 5: Click to see solution\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries_df <- data.frame(\n  Country = c('Brazil', 'Sweden', 'India', 'Canada', 'Nigeria'),\n  Continent = c('South America', 'Europe', 'Asia', 'North America', 'Africa'),\n  Population = c(212.6, 10.3, 1380, 37.7, 206),\n  UN_Member = c(TRUE, TRUE, TRUE, TRUE, TRUE)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Here, I am using example GDP per capita figures\ncountries_df$GDP_Per_Capita <- c(57395, 8920, 46212, 59819, 3036)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries_df <- subset(countries_df, select = -UN_Member)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhigh_gdp_df <- subset(countries_df, GDP_Per_Capita > 20000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhigh_gdp_df <- high_gdp_df[order(-high_gdp_df$GDP_Per_Capita),]\n```\n:::\n\n:::\n\n## Working with Lists\n\nLists in R are a powerful data structure that allows you to create a collection of elements under a single variable. These elements can be of any type, including numbers, strings, vectors, and even other lists. This flexibility makes lists particularly useful for organizing and managing complex data sets.\n\n\nBefore we start creating lists lets first understand what are lists.\n\nImagine you have a backpack where you can put all sorts of things: a water bottle, some books, a sandwich, and even another smaller bag with your gym clothes. In R, a list is like that backpack. You can put different things in it, like numbers, words, or even other backpacks (lists). And just like you can take things out of your backpack one at a time, you can do the same with a list in R.\n\n### Why Do We Need Lists?\n\n*Mix and Match:** You can have different types of things in a list. So if you're collecting different kinds of information, you can keep them all in one place.\n\n*Keep Things Organized:** Sometimes, you have stuff that belongs together, like a pair of socks. Lists let you keep things that belong together, close together.\n\n*They're Flexible:** You might have just a few things to carry one day, and a lot the next day. Lists can grow with you and can hold just a few things or lots of things, and it's easy to add or take away.\n\n*They Remember:** In a list, each spot has a name, like a pocket in your backpack. You can find what you need by remembering the pocket's name, so you don't have to dig through everything.\n\nIn simple terms:\nLet's say you're going on a treasure hunt, and you have a map, a compass, some snacks, and a camera to take pictures of the treasure. You put all these in your backpack. In R, you would put all these into a list, and when you want to use your camera, you just say \"Hey list, give me the camera!\" and you're ready to snap photos.\n\n### Creating Lists\n\nTo create a list, you can use the list() function. Here's an example:\n\n\nNotice that in the list we can add differnet types of data for example in the above example we added chracters, numeric and logical data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list <- list(name = \"Statistics\", sections = 1:10, medium = \"online\", data = TRUE)\n```\n:::\n\n\n:::{.callout-note}\nNotice that the list is versatile, allowing the inclusion of various data types; for instance, in the above example, characters, numbers, and logical or Boolean values have been incorporated.\n:::\n\n### Accessing List Elements\n\n- You can access the elements of a list using double square brackets [[ ]] for a single element or the $ operator to access elements by name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Statistics\"\n```\n:::\n\n```{.r .cell-code}\nmy_list[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nmy_list[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"online\"\n```\n:::\n:::\n\n\n- Access elements by name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Statistics\"\n```\n:::\n\n```{.r .cell-code}\nmy_list$sections\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nmy_list$data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n### Modifying Lists\n\nLists can be modified after creation. You can change elements, add new ones, or remove existing ones.\n\n**Change the first element**\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list[[1]] <- \"Learning R for begginers\"\n```\n:::\n\n\n**Add a new element**\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list$new_element <- \" Basic Statistics\"\n```\n:::\n\n\n**Remove an element**\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list$data <- NULL\n```\n:::\n\n\n### Nested Lists\nLists can contain other lists. This allows for the creation of complex structures known as nested lists.\n\n**Create a nested list**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_nested_list <- list(\n  course = my_list,\n  participants = list(names = c(\"Asieh\", \"Alice\", \"Bob\", \"Bil\", \"Fie\", \"Ria\", \"Mia\"), count = 4)\n)\n\n\nmy_nested_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$course\n$course$name\n[1] \"Learning R for begginers\"\n\n$course$sections\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$course$medium\n[1] \"online\"\n\n$course$new_element\n[1] \" Basic Statistics\"\n\n\n$participants\n$participants$names\n[1] \"Asieh\" \"Alice\" \"Bob\"   \"Bil\"   \"Fie\"   \"Ria\"   \"Mia\"  \n\n$participants$count\n[1] 4\n```\n:::\n:::\n\nLists are an incredibly versatile and important data structure in R. They can store collections of objects of various types and sizes, making them indispensable for handling complex data sets.\n\n## Exercise 6\n\n1. Create a list containing a numeric vector, a character vector, and a logical.\n2. Access and modify the second element of the list.\n3. Add a new boolean element to the list.\n4. Create a nested list \n5. Access one of the inner list's elements \n\n:::{.callout-tip collapse=\"true\" title=\"Excercise 6: Click to see solution\"}\n\nStep 1: Create a List\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a list with a numeric vector, a character vector, and a logical vector\nmy_list <- list(\n  numeric_vector = c(1, 2, 3, 4, 5),\n  character_vector = c(\"apple\", \"banana\", \"cherry\"),\n  logical_vector = c(TRUE, FALSE, TRUE)\n)\n```\n:::\n\n\n\nStep 2: Access and Modify the Second Element of the List\n\n::: {.cell}\n\n```{.r .cell-code}\n# Modify the second element of the list\nmy_list$character_vector <- c(\"grape\", \"watermelon\", \"kiwi\")\n```\n:::\n\n\n\nStep 3: Add a New Boolean Element to the List\nTo add a new boolean element (TRUE or FALSE), you can simply assign it to a new element in the list:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a new boolean element to the list\nmy_list$new_boolean <- TRUE\n```\n:::\n\n\nStep 4: Create a Nested List and Access an Element\nA nested list is a list within a list. Here's how you can create one and then access an element from the inner list:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a nested list\nmy_list$nested_list <- list(\n  inner_numeric = c(10, 20, 30),\n  inner_character = c(\"red\", \"green\", \"blue\")\n)\n```\n:::\n\n\nStep 5: Access inner elements\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access the first element of the inner numeric vector of the nested list\ninner_element <- my_list$nested_list$inner_numeric[1]\n```\n:::\n\n\nPrint it to see the changes\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print the entire list to see the changes\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$numeric_vector\n[1] 1 2 3 4 5\n\n$character_vector\n[1] \"grape\"      \"watermelon\" \"kiwi\"      \n\n$logical_vector\n[1]  TRUE FALSE  TRUE\n\n$new_boolean\n[1] TRUE\n\n$nested_list\n$nested_list$inner_numeric\n[1] 10 20 30\n\n$nested_list$inner_character\n[1] \"red\"   \"green\" \"blue\" \n```\n:::\n\n```{.r .cell-code}\n# Print the accessed inner element\nprint(inner_element)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}