{
  "hash": "6c0a689129aa740a3b523c8c4a5e5023",
  "result": {
    "markdown": "# Basic R Syntax and Operations {#sec-basic-syntax}\n\n\n\n\n\n## Arithmetic / Mathematical Operations\n\nArithmetic operations are fundamental in R, as in many programming\nlanguages. They allow us to perform basic mathematical calculations. In\nthis section, we will explore the primary arithmetic operators available\nin R.\n\n::: callout-note\nPlease note that there is no need to save any part of this course or\ncreate a new file at this moment. We will initially work in the console,\nand later, we will proceed to create a new R R Script / R Markdown file,\nwhere we will write and save our code.\n:::\n\n### Operators\n\nHere are the basic arithmetic operators in R:\n\n-   Addition (`+`)\n-   Subtraction (`-`)\n-   Multiplication (`*`)\n-   Division (`/`)\n-   Exponentiation (`^`)\n\n## Using basic operators in R\n\nLet's examine these operators and observe how they function. We will use\nthe console to execute the code. The console is the panel at the bottom\nleft of your RStudio window. You can type code directly into the console\nand press enter to execute it. The console is a great place to\nexperiment with code, but it is not a good place to save your code. We\nwill learn how to save our code in a later section.\n\n### Addition\n\nYou can type or copy this code chunk and paste it in your console and\nhit enter\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Addition\n3 + 4  # Output: 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n:::\n\n\nHooray! You've just taken your first step into the world of coding with\nR. When you input \"3 + 4\", R calculates that the sum is 7. You might\nhave noticed the \\[1\\] preceding your output in the console; don't\nworry, this simply indicates that 7 is the first (and only) element in\nthe output. The index, \\[1\\], is particularly helpful when you're\ndealing with lengthy outputs, as it marks the position of the first\nelement in each line, making it easier to track elements.\n\n::: callout-tip\n**Index with continuous numbers**\n\nBelow exercise demonstrate indexing when you are working with large\noutputs.\n\nCopy paste the code chunk in the console\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In this code we are telling R to store numbers from 1 to 100 in a an object called \"numbers\" \nnumbers <- 1:100\n\n# and then print the stored object (numbers in this case)\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n:::\n:::\n\n\nIn this example, the sequence is straightforward because it consists of\nordered numbers from 1 to 100, making it clear that the number at\npositions **1, 19, 37, 55, 73 and 91**. However, the alignment of\nnumbers and their respective positions may vary for each individual,\ndepending on the size of the console pane in use.\n\n**Index with random numbers**\n\nBelow exercise demonstrate indexing in R when the numbers are random.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We are telling R to store numbers 1 to 35 randomly in a an object called random_numbers \nrandom_numbers <- rnorm(1:35)\n\n# and then print the stored object (random_numbers in this case)\nprint(random_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -0.262379265 -0.410165121 -0.368954457 -0.316180780  0.714371604\n [6]  0.507136454  0.451436486  0.735259730 -0.231344973  2.574773110\n[11]  0.231891386 -0.288501194 -0.009018259  1.739951175  0.228046121\n[16] -0.502874683 -0.035044237  0.431658055  0.627265765 -0.357195428\n[21]  0.320919766 -0.756030528  1.409238207 -2.027627361 -0.507993182\n[26] -1.956271902 -1.161724641  1.175870104  0.583805092 -0.042932748\n[31] -1.143212890 -0.220021551  0.558432302 -0.060466562  0.816907161\n```\n:::\n:::\n\n\nIn this R output, the numbers in square brackets, represent the index\nposition of the first number on each line. However, the alignment of\nnumbers and their respective positions may vary for each individual,\ndepending on the size of the console pane in use and every time you run\nthis code.\n\nThese index positions help you to quickly locate and reference specific\nelements in the output, particularly when dealing with large datasets.\n:::\n\n### Subtraction\n\nPlease **type**, the following arithmetic operations into the console,\nthen press enter to execute the code and observe the results. Focus to\ntype is to develop muscles memory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subtraction\n10 - 6  # Output: 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n### Multiplication\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Multiplication\n5 * 3  # Output: 15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n\n### Division\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Division\n8 / 2  # Output: 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n### Exponention\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exponentiation\n2^3  # Output: 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nCertainly! Here's a section on the Order of Operations in R:\n\n### Order of Operations in R\n\nIn R, like in most programming languages, when a line of code contains\nmultiple operations, it's crucial to understand how these operations are\nprioritized and executed. This prioritization is governed by the \"Order\nof Operations.\" This concept, sometimes known as operator precedence,\ndictates the rules R follows to evaluate expressions.\n\nThe order of operations in R is as follows:\n\n1.  **Parentheses `()`**: Operations inside parentheses are performed\n    first. This allows you to override the default order of operations.\n    For example, in `2 * (3 + 4)`, the addition inside the parentheses\n    is performed before the multiplication.\n\n2.  **Exponents `^`**: Next, R performs exponentiation. For instance, in\n    `3 ^ 2 * 4`, the exponentiation `3 ^ 2` is evaluated before the\n    multiplication.\n\n3.  **Divide `/` and Multiply `*`**: These operations are on the same\n    level of precedence and are performed from left to right. For\n    example, in the expression `10 / 2 * 3`, R first divides 10 by 2,\n    and then multiplies the result by 3.\n\n4.  **Add `+` and Subtract `-`**: These also share the same level of\n    precedence and are executed from left to right. In `5 + 3 - 2`, R\n    first adds 5 and 3, then subtracts 2 from their sum.\n\nRemember, R follows these rules strictly. However, you can always use\nparentheses to structure your expressions in a way that reflects the\nintended calculations. Understanding and utilizing the order of\noperations is essential for writing accurate and efficient R code.\n\n::: {.callout-tip title=\"Activity\"}\nActivity basic operators and order of operations in R\n\nType each of the following expressions into the console and press enter\nto execute:\n\n-   `8 + 2 * 5`\n-   `(8 + 2) * 5`\n-   `20 / 4 - 3` -`20 / (4 - 3)`\n-   `3 ^ 2 + 4`\n-   `3 ^ (2 + 4)`\n\nNote down the output for each expression. Think about why each\nexpression gives the result it does based on the order of operations.\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Solution\"}\nDo your numbers match with these?\n\n-   `8 + 2 * 5` = 18 (Multiplication before addition)\n-   `(8 + 2) * 5` = 50 (Parentheses first, then multiplication)\n-   `20 / 4 - 3` = 2 (Division before subtraction)\n-   `20 / (4 - 3)` = 20 (Parentheses first, then division)\n-   `3 ^ 2 + 4` = 13 (Exponentiation before addition)\n-   `3 ^ (2 + 4)` = 729 (Parentheses first, then exponentiation)\n\nUnderstanding the order of operations is essential for accurate\ncomputations in R\n:::\n\n## Objetcs, Variables and Vectors\n\nIn R, think of an \"object\" as a box where you can store all kinds of\nthings. This box could contain a single item, like a marble, or many\nitems, like a bunch of marbles lined up in a row. In R, everything is\nstored in these kinds of boxes, and each one is called an 'object.'\n\nNow, imagine that inside one of these boxes, you have a tray of eggs.\nThis tray is a bit like a \"vector\" in R. It holds items (the eggs) that\nare all the same kind, neatly in a row. If you replace eggs with\nnumbers, that's what a numeric vector is -- a line-up of numbers.\n\nAnd when you talk about a \"variable,\" it's like having a name tag on\nyour box. It's the name you give to your box so you can find it easily\namong other boxes. For instance, if you put a name tag that says 'x' on\na box with the number 10 inside, 'x' is your way of saying, \"This is\nwhere I keep my number 10.\"\n\nLet's simplify that:\n\n-   **Object:** A box for keeping any item or set of items in R.\n-   **Vector:** A tray inside the box that holds items of the same type\n    in a neat line.\n-   **Variable:** The name tag on the box, telling you what's inside\n    without having to open it.\n\n### Vectors in R\n\nVectors are one of the most fundamental data types in R. They are\ncollections of elements that are all of the same type. You can create a\nvector using the `c()` function, which stands for 'combine':\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a numeric vector\nnumbers <- c(1, 2, 3, 4, 5)\n\n# Creating a character vector\nwords <- c(\"apple\", \"banana\", \"cherry\")\n```\n:::\n\n\n### Manipulating Vectors\n\nOnce you have a vector, you can perform operations on all its elements\nat once:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding 2 to each element\nnumbers + 2  # Output: 3, 4, 5, 6, 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 5 6 7\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenating strings\npaste(words, \"fruit\")  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"apple fruit\"  \"banana fruit\" \"cherry fruit\"\n```\n:::\n:::\n\n\n### Variables in R\n\nIn R, to assign a value to a variable, we use the **assignment\noperator** `<-`.\n\nThe `<-` assignment operator is one of the most utilized operator in R.\nIn RStudio, the keyboard shortcut for the assignment operator `<-` is\nAlt + - (Alt and hyphen) on Windows and Linux. On a Mac, you can use\nOption + - (Option and hyphen) to type the assignment operator `<-`. So,\nyou would hold down the Alt or Option key and press the hyphen key at\nthe same time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 10  # 'my_number' is now 10\nmy_text <- \"Hello, world!\"  # 'my_text' is now \"Hello, world!\"\n```\n:::\n\n\nIn these examples:\n\n-   **my_number and my_text**: are the names of the variables.\n\n-   **10 and \"Hello, world!\"**: are the values we're storing in the\n    variables.\n\n-   **\\<-**: is the assignment operator that stores/assigns the values\n    into the variables.\n\n### Using Variables\n\nOnce a value is stored in a variable, you can use the variable name to\naccess the value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number + 5  # Output: 15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n\nYou can also change the value stored in a variable by assigning a new\nvalue to it (older value will be overwritten and will not be available\nanymore):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_number <- 20  # 'my_number' is now 20\n```\n:::\n\n\n### Variable Naming Rules\n\nWhen naming your variables, keep in mind the following rules:\n\n-   Variable names should start with a letter.\n-   They can contain letters, numbers, underscores (\\_), and periods\n    (.).\n-   They cannot contain spaces or other special characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalid_name <- 10  # This is a valid variable name\nalso_valid123 <- 20  # This is also valid\n```\n:::\n\n\nThis line will cause an error because of the space in the variable name\nType the code in console without \\# and see the error message\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# not valid <- 30\n```\n:::\n\n\n## Basic Data Types\n\nUnderstanding data types is crucial as they form the foundation upon\nwhich we build our data analysis. In R, the main data types you will\nencounter are numeric, character, and logical.\n\n### Numeric Data Type\n\nNumeric data types include both integers and floating-point numbers.\nHere's how you can work with numeric data in R:\n\n-   Numeric Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum1 <- 5        # integer\nnum2 <- 5.5      # floating-point number\n```\n:::\n\n\n### Character Data Type\n\nCharacter data type is used to store text. Here's how you can work with\ncharacter data in R:\n\n-   Character Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar1 <- \"Hello\"       # a word\nchar2 <- \"Hello, world!\"  # a sentence\n```\n:::\n\n\n### Logical Data Type\n\nLogical data type represents TRUE or FALSE values, which are often the\nresult of comparisons. Here's how you can work with logical data in R:\n\n-   Logical Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog1 <- TRUE            # TRUE value\nlog2 <- (5 > 3)         # TRUE, because 5 is greater than 3\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}