{
  "hash": "6a21d56bab055a7eafe9b5f62136ebae",
  "result": {
    "markdown": "# Basic Data Import {#sec-basic-import}\n\n\n\n\n\n## Introduction\n\nIn this section, we explore importing data into R, focusing on the\n`readr` package. `readr` is part of the tidyverse, providing an\nefficient way to read tabular data like CSV and TSV files. There are\nmany packages designed for specific type of data import. For example,\n`readxl` package is designed to read excel files, `haven` package is\ndesigned to read SAS, SPSS and Stata files. We will explore only `readr`\npackage in the next section.\n\nWe will focus on the following topics:\n\n1.  Understanding the basics of the `readr` package.\n2.  Import data into R using `readr` functions.\n3.  Explore the structure of imported data.\n\n::: callout-important\nPlease install and load the `readr` package before proceeding. If you\nhave not done so already please follow the instructions in the previous\nsection Exercise 9.\n:::\n\n### Key Features of `readr` package\n\n`readr` is part of the tidyverse suite in R and is designed to\nefficiently read and write tabular data. It is known for its simplicity\nand speed compared to base R functions. The key features of `readr`\npackage are:\n\n-   Fast and user-friendly reading of CSV, TSV, and other delimited\n    files.\n-   Produces tibble output, which is a modern approach to data frames in\n    R.  \n-   Handles text and file connections, and can even read from compressed\n    files directly.\n\n### Importing data with `readr`\n\n**Methods of importing data**\n\nThere are two primary methods for importing data into R:\n\n1 - From local file on a computer 2 - From the Web directly\n\nI have generated simulated data similar to `iris` data set and saved it\nin the data folder on my computer. You can use the iris `data` available\nin R, OR read in any data in CSV or TSV file format.\n\n::: callout-tip\n`iris` data set is a famous real world data set that is available in R.\nIt is a data set that contains information about iris. It contains 150\nobservations and 5 variables. The variables are sepal length, sepal\nwidth, petal length, petal width, and species. The species variable has\nthree levels: setosa, versicolor, and virginica. The data set is\navailable in R and can be loaded using the data() function. The data set\nis also available in CSV format on the internet.\n:::\n\nWe will use the simulated data set to demonstrate how to import data\ninto R from a local file.\n\n**1- Importing data from local file**\n\nImportant things to know before importing data from a local file\n\n-   Import data from a local file\n-   read_csv() function is used to read a csv file\n-   read_csv() function takes the file path as an argument\n-   The file path is the location of the file on your computer\n-   The file path is a string, so it must be enclosed in quotes \"\"\n-   The file path can be absolute or relative\n-   Absolute file paths start with the root directory for example\n    \"(C:/projects/dir1/dir2/learnR/data/)\", C is root directory here\n-   Relative file paths start with the current working directory \"data/\"\n-   The working directory is the default location where R looks for\n    files\n-   You can check the current working directory using the getwd()\n    function\n-   You can change the working directory using the setwd() function\n\nIn this example, we'll use the variable name iris. Remember, you'll need\nto provide the file path on your computer. By doing this, the data will\nbe loaded into R and assigned to the variable iris. You also get a brief\nsummary of the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import data from local file\niris <- readr::read_csv(\"../data/iris.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 150 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): species\ndbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\" title=\"Want to know what the description means?\"}\n-   The first line of the output tells you that the data set has 150\n    rows and 5 columns.\n-   The second line tells you the data is comma separated.\n-   The third line tells you to one column names \"species\" contains data\n    of type character.\n-   The fourth line tells you that the other four columns contain data\n    of type double.\n-   Next two are to get full specification of data or suppress this\n    message.\n:::\n\nWhile you will be working with your projects in R you will face\ndifferent scenarios where you will need to import data from a local\nfile.\n\n### Different Scenarios for Importing Data\n\nBelowa are few examples of different scenarios for importing data from a\nlocal file.\n\n1.  Script and Data File in the Same Directory If script.R and\n    data_file.csv are in the same directory:\n\n``` plaintext\nproject/\n├── data_file.csv\n└── script.R\n```\n\nImport using:\n\n`data <- read_csv(\"./data_file.csv\")`\n\n2.  Data File in a Subdirectory If data_file.csv is in a subdirectory:\n\n``` plaintext\nproject/\n├── data/\n│   └── data_file.csv\n└── script.R\n```\n\nImport using:\n\n`data <- read_csv(\"./data/data_file.csv\")`\n\n3.  Script in a Subdirectory If script.R is in a subdirectory, and\n    data_file.csv is in the parent directory:\n\n``` plaintext\nproject/\n├── data_file.csv\n└── session/\n    └── script.R\n```\n\nImport using:\n\n`data <- read_csv(\"../data_file.csv\")`\n\n4.  Both in Different Subdirectories If both are in different\n    subdirectories of the same parent directory:\n\n``` plaintext\nproject/\n├── data/\n│   └── data_file.csv\n└── session/\n    └── script.R\n```\n\nImport using:\n\n`data <- read_csv(\"../../data/data_file.csv\")`\n\n5.  Nested Subdirectories If your script is in a nested subdirectory:\n\n``` plaintext\nproject/\n├── data/\n│   └── data_file.csv\n└── session/\n    └── subfolder/\n        └── script.R\n```\n\nImport using:\n\n`data <- read_csv(\"../../../data/data_file.csv\")`\n\nHave look at the iris data with function `head()`\n\nWe can use the iris data for further exploration load the iris data set\nusing the data() function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\n```\n:::\n\n\nYou will see the iris data set in the environment pane. You can also use\nthe `head()` function to view the first few rows of the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n\n**2- Importing data from web**\n\nIn this section, we will learn how to import data from the web. We will\nuse the `read_csv()` function to import data from the web. The\n`read_csv()` function takes the URL of the data as an argument. The URL\nis the location of the data on the web. The URL is a string, so it must\nbe enclosed in quotes \"\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# URL of the dataset\nurl <- \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins.csv\"\n\n# Read the data into R\npenguins_data <- read_csv(url)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nIn this example we first stored the web address into a variable **url**.\nThen we used the `read_csv()` function to read the data from **url**\ninto R. We assigned the data to the variable **penguins_data**. We can\nnow use the variable penguins_data to access the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n:::\n:::\n\n\n### Exploring the structure of imported data\n\nUnderstanding your dataset's structure is vital in data analysis. R\noffers essential functions to examine and comprehend this structure.\nThis guide will introduce these tools, crucial for familiarizing\nyourself with your data before proceeding with analysis or\nvisualization. R's functions enable effective data summarization and\nstructural inspection.\n\n**Basic Functions for Data Exploration**\n\n**Viewing Data**\n\nhead() and tail(): These functions show the first and last parts of your\ndata, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n:::\n:::\n\n\n**Summarizing Data**\n\nsummary(): This function gives a quick summary of the data in each\ncolumn, such as mean, median, min, max for numeric data, and frequency\nfor categorical data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\" title=\"Want to know what the summary output means?\"}\nThese are the numerical columns of the dataset.\n\nSepal.Length, Sepal.Width, Petal.Length, Petal.Width:\n\nFor each of these columns, the summary output shows:\n\nMin.: The smallest value in the column. 1st Qu.: The first quartile\n(25th percentile), meaning 25% of the values in the column are below\nthis number. Median: The middle value of the column when the values are\nsorted in ascending order. It divides the data into two halves. Mean:\nThe average of all the values in the column. 3rd Qu.: The third quartile\n(75th percentile), indicating 75% of the values are below this number.\nMax.: The largest value in the column. For example, for Sepal.Length,\nthe smallest value is 4.3, the median is 6.0, and the largest value is\n7.9.\n\nspecies: This is a categorical column, as indicated by the data types\nClass :character and Mode :character. The summary for this kind of\ncolumn is different:\n\nLength: The total number of entries in the column. In this case, there\nare 150 species entries. Class and Mode: These indicate the data type of\nthe column, which is character in this case, suggesting that the species\nnames are text data.\n:::\n\n**Understanding Data Structure**\n\nstr(): This function displays the structure of your data, including the\ntype of each column, the first few entries in each column, and the total\nnumber of observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n:::\n:::\n\n\ndim(): Use this to find out the dimensions of your data (number of rows\nand columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 150   5\n```\n:::\n:::\n\n\nnames(): This returns the names of the columns in your data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n```\n:::\n:::\n\n\nclass(): This function tells you the class of the data object (e.g.,\ndata.frame, matrix).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\nPractice Exercise Load a dataset into R (this can be any dataset of your\nchoice, such as the built-in mtcars or iris datasets) and use the\nfunctions mentioned above to explore its structure. Write down your\nobservations about the dataset's size, structure, and types of data it\ncontains.\n\n## Excercise 8\n\nMore than the above described two methods you can also use the data from\nR. R has some built-in datasets. You can use these datasets to practice\nyour data analysis skills. The mtcars dataset is a classic dataset\navailable in R, containing data extracted from the 1974 Motor Trend US\nmagazine. It comprises fuel consumption and 10 aspects of automobile\ndesign and performance for 32 automobiles.\n\n**Tasks**\n\n1- Load the Data\n\n```         \n- Use the data() function to load the mtcars dataset into your R environment.\n```\n\n2- View the Data\n\n3- Summarize the Data\n\n4- Explore the Data Structure\n\n5- Determine the Data Dimensions\n\n6- Retrieve the Column Names\n\n7- Identify the Data Type\n\n**Questions for Reflection**\n\n-   What are the dimensions of the mtcars dataset?\n-   Can you identify any categorical variables in the dataset? If so,\n    which are they?\n-   What is the average (mean) value of the mpg (miles per gallon)\n    column?\n\n::: {.callout-tip collapse=\"true\" title=\"Excercise 8: Click to see solution\"}\nSolution\n\nLoad the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(mtcars)\n```\n:::\n\n\nView the Data\n\nTo view the first few rows of the dataset, use the head() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n:::\n\n\nSummarize the Data\n\nFor a statistical summary of the dataset, use the summary() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n:::\n:::\n\n\nExplore the Data Structure\n\nTo understand the structure of the dataset, use the str() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n:::\n:::\n\n\nDetermine the Data Dimensions\n\nThe dim() function provides the dimensions of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32 11\n```\n:::\n:::\n\n\nRetrieve the Column Names\n\nUse the names() function to get the column names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n```\n:::\n:::\n\n\nIdentify the Data Type\n\nThe class() function reveals the data type of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\nQuestions for Reflection\n\nDimensions of the mtcars Dataset:\n\nUse dim(mtcars) to find the dimensions. The mtcars dataset has 32 rows\n(cars) and 11 columns (variables).\n\nCategorical Variables:\n\nBy examining the dataset using str(mtcars) or summary(mtcars), you can\nidentify that the mtcars dataset does not explicitly contain categorical\nvariables as all columns are either integer or numeric. However, some\nvariables like gear and cyl (number of gears and cylinders,\nrespectively) can be considered as categorical in certain contexts.\n\nAverage Value of MPG:\n\nTo find the average value of the mpg column, use the mean() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20.09062\n```\n:::\n:::\n\n:::\n\n## Missing Data\n\nMissing data is a prevalent issue in real-world datasets, arising from\nvarious sources like data entry errors, equipment malfunctions, or\nparticipant dropout in studies. It poses challenges for many machine\nlearning algorithms, which often require complete datasets. Thus,\nidentifying and handling missing data is a crucial step in data\nanalysis.\n\nWe will demonstrate how to identify missing data in R using the\n`airquality` dataset, which records daily air quality measurements in\nNew York from May to September 1973.\n\n::: callout-tip\nTo begin, load the `airquality` dataset into your R environment using\nthe `data(airquality)` function.\n:::\n\n### Identifying Missing Data\n\n**Using the is.na() Function**\n\nThe `is.na()` function in R helps in checking for missing values. It\nreturns a logical vector where each value is `TRUE` if it's missing\n(`NA`), and `FALSE` otherwise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for missing values in the airquality dataset\nmissing_values <- is.na(airquality)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(missing_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Ozone Solar.R  Wind  Temp Month   Day\n[1,] FALSE   FALSE FALSE FALSE FALSE FALSE\n[2,] FALSE   FALSE FALSE FALSE FALSE FALSE\n[3,] FALSE   FALSE FALSE FALSE FALSE FALSE\n[4,] FALSE   FALSE FALSE FALSE FALSE FALSE\n[5,]  TRUE    TRUE FALSE FALSE FALSE FALSE\n[6,] FALSE    TRUE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n**Counting missing values in a specific column**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Counting missing values in specific columns of the airquality dataset\nnum_missing_ozone <- sum(is.na(airquality$Ozone))\nnum_missing_ozone\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 37\n```\n:::\n:::\n\n\nfunction sum() is used to count the number of missing values in the\nOzone column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_missing_solarR <- sum(is.na(airquality$Solar.R))\nnum_missing_solarR\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n:::\n\n\n**Counting missing values in each column**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Counting missing values in each column of the dataset\ncol_missing_values <- colSums(is.na(airquality))\ncol_missing_values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R    Wind    Temp   Month     Day \n     37       7       0       0       0       0 \n```\n:::\n:::\n\n\nfunction colSums() is used to count the number of missing values in each\ncolumn of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Counting the number of columns with missing values\nnum_cols_missing <- sum(col_missing_values > 0)\n```\n:::\n\n\n**Counting missing values in each row**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Counting missing values in each row of the dataset\nrow_missing_values <- rowSums(is.na(airquality))\n```\n:::\n\n\nfunction rowSums() is used to count the number of missing values in each\nrow of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(row_missing_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 2 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Counting the number of rows with missing values\nnum_rows_missing <- sum(row_missing_values > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_rows_missing\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 42\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Counting the number of rows with no missing values\nnum_rows_complete <- sum(row_missing_values == 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_rows_complete\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 111\n```\n:::\n:::\n\n\n### Handling Missing Data\n\nAfter identifying missing data, you can decide how to handle it. Common\nstrategies include:\n\n1 **Removing Rows or Columns:** If a column or row has too many missing\nvalues, it might be best to exclude it from analysis.\n\n2 **Imputing Values:** You can fill in missing values with estimates,\nsuch as the mean or median of the column.\n\nWhen a column or row in your dataset has too many missing values, it\nmight be impractical to impute them. In such cases, you might choose to\nremove these rows or columns from your analysis.\n\n**Removing Rows**\n\nTo remove rows with any missing values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Removing rows with any missing values\nairquality_clean <- na.omit(airquality)\n```\n:::\n\n\n**Removing Columns** To remove columns with any missing values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a threshold for removal (e.g., 50% missing values)\nthreshold <- 0.5 * nrow(airquality)\n\n# Removing columns with missing values above the threshold\nairquality_clean <- airquality[, colSums(is.na(airquality)) < threshold]\n```\n:::\n\n\n**Imputing Values** Instead of removing missing data, another approach\nis to fill in the missing values with estimates. This process is known\nas imputation. Common methods include using the mean, median, or a\npredictive model to estimate the missing values.\n\nImputing with Mean or Median\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Impute missing values in the Ozone column with the mean\nairquality$Ozone[is.na(airquality$Ozone)] <- mean(airquality$Ozone, na.rm = TRUE)\n```\n:::\n\n\nAlternatively, you can use the median, which is less sensitive to\noutliers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Impute missing values in the Ozone column with the median\nairquality$Ozone[is.na(airquality$Ozone)] <- median(airquality$Ozone, na.rm = TRUE)\n```\n:::\n\n\n**Imputing with a Predictive Model**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Impute missing values in the Ozone column with a predictive model\nairquality$Ozone[is.na(airquality$Ozone)] <- predict(lm(Ozone ~ ., data = airquality), airquality)[is.na(airquality$Ozone)]\n```\n:::\n\n\nThe above code uses a linear regression model to predict the missing\nOzone values based on the other variables in the dataset. The lm()\nfunction is used to fit the linear regression model, and the predict()\nfunction is used to predict the missing values. The lm() function takes\ntwo arguments: the first is a formula specifying the model, and the\nsecond is the dataset. The predict() function takes two arguments: the\nfirst is the model, and the second is the dataset. The\n\\[is.na(airquality\\$Ozone)\\] argument is used to specify that only the\nmissing values should be predicted. The predict() function returns a\nvector of predicted values, which is then used to replace the missing\nvalues in the Ozone column.\n\n",
    "supporting": [
      "basic-import_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}