{
  "hash": "5f787f0d7d86828ec43451fd14556fb6",
  "result": {
    "markdown": "# R Packages and Libraries {#sec-packages-libraries}\n\n\n\n\n\n## Understanding R Packages and Libraries\n\nWhen working with R, you'll often hear about \"packages\" and \"libraries.\"\nIt's important to understand what these are and how they are used in the\nR programming environment.\n\n### What Are R Packages?\n\nThink of a package as a toolbox that contains a set of tools\n(functions), materials (data sets), and an instruction manual\n(documentation). Just as you might have different toolboxes for\ndifferent types of work (like electrical work or carpentry), in R, you\nhave different packages for different types of tasks, like creating\ngraphs, analyzing statistical data, or manipulating text.\n\nPackages in R are created by the community: people like you and me who\nneed a set of functions and decide to bundle them together for everyone\nto use. Once a package is created, it can be shared with others.\n\n### What Are R Libraries?\n\nNow, if packages are like toolboxes, then libraries are like the shelves\nwhere you store these toolboxes. In R, a library is a directory on your\ncomputer where packages are stored. When you install a package, it's\nlike putting a toolbox on one of these shelves. And when you want to use\na package, you have to take it off the shelf and open it, which in R,\nyou do by \"loading\" the package.\n\n### Where Are Libraries Stored?\n\nOn your computer, the R libraries are stored in a place that R knows and\ncan access when you ask it to. This is usually a folder named \"R\" in\nyour system's library folder or in a location that you specify. You\ndon't usually have to worry about where this is unless you're managing\nmultiple versions of R or you have special security settings on your\ncomputer.\n\n::: callout-tip\nIf you want to check where the libraries are installed on computer run\nthis command in your console `.libPaths()`\n:::\n\n## Installing, Loading, and Managing R Packages\n\n### What Are the Sources of R Packages?\n\nPackages can come from several places:\n\n1.  **CRAN (Comprehensive R Archive Network):** This is the main\n    repository where R packages are stored. Think of it as the official\n    app store for R. When you use install.packages(), you're usually\n    downloading from CRAN.\n\n2.  **Bioconductor:** This is a repository that's focused on\n    bioinformatics packages.\n\n3.  **GitHub:** Some developers choose to put their packages on GitHub,\n    a platform for developers to share code. These aren't always\n    officially released on CRAN, but you can still install them using\n    tools like devtools. This requires first install devtools from\n    `CRAN website`, load its libraries before using it install packages\n    from Github\n\n4.  **Local Files:** Sometimes, you might have a package file (with a\n    .tar.gz extension for Mac/Linux or .zip for Windows) on your\n    computer that you can install directly.\n\n**Summary**\n\n-   A package is a collection of functions, data, and documentation that\n    extends R's capabilities.\n-   A library is a place on your computer where R packages are stored.\n-   You can get packages from places like CRAN, Bioconductor, GitHub, or\n    even local files on your computer.\n-   Once you get the hold of installing and loading packages, you'll\n    have access to a vast world of tools that can help you do almost\n    anything you can imagine with R.\n\n### Section: Installing and Loading R Packages\n\nIn this section, we'll cover the essential skills of installing and\nloading packages in R, a crucial step in leveraging the vast array of\ntools available for data analysis in R. R packages are collections of\nfunctions, data, and compiled code that extend the basic functionality\nof R.\n\nBy the end of this section, students will be able to: 1. Install R\npackages from CRAN and other repositories. 2. Load packages into an R\nsession. 3. Troubleshoot common issues related to package installation.\n\n### Installing R Packages from CRAN\n\n**Accessing CRAN** - CRAN (Comprehensive R Archive Network) is the main\nrepository for R packages. - To install a package from CRAN, use the\n`install.packages()` function in R.\n\n**Example Command** - For example, to install the package `ggplot2`, you\nwould use the command: `install.packages(\"ggplot2\")`.\n\n**Internet Connection** - Ensure you have an active internet connection,\nas R will need to download the package files.\n\n**Dependencies** - When installing a package, R automatically installs\nany other packages (dependencies) that are required.\n\n::: callout-note\nIf you use the command `install.packages(\"ggdag package\")`, to install a\npackage of your choice `ggdag` as an example, and you get the following\nerror message.\n\nWarning in install.packages : package 'ggdag package' is not available\nfor this version of R\n\nA version of this package for your version of R might be available\nelsewhere, see the ideas at\n`https://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages`\n\nYou will get this error message because the package is not available on\nCRAN repositiory. Search it on web and see where this package is\navailable and then try the below two methods You can try installing it\nfrom GitHub using the `devtools` package or from Bioconductor.\n:::\n\n### Installing Packages from GitHub\n\n\\***Using DevTools** - The `devtools` package in R is designed to\nfacilitate package development and installation from sources like\nGitHub. - First, install `devtools` from CRAN using\n`install.packages(\"devtools\")`. - Then load the package using\n`library(devtools)`.\n\n**Install from GitHub** - With `devtools` installed, and loaded you can\nuse the `install_github()` function to install packages directly from\nGitHub. - The syntax is\n`devtools::install_github(\"username/repository\")`, where `username` is\nthe GitHub username and `repository` is the name of the repository.\n\n**Example Command** - For instance, if you want to install a package\nnamed `leaflet` from a GitHub user\n``` rstudio``, use: ```devtools::install_github(\"rstudio/leaflet\")\\`.\n\n**Note on Private Repositories** - For private repositories, you may\nneed to configure additional authentication settings.\n\n### Installing Packages from Bioconductor\n\n**Bioconductor for Bioinformatics** - Bioconductor is a project\nproviding tools for the analysis and comprehension of high-throughput\ngenomic data in R. - It has its own set of packages, particularly\nfocused on bioinformatics.\n\n**Install Bioconductor Packages** - To install packages from\nBioconductor, first install the `BiocManager` package from CRAN using\n`install.packages(\"BiocManager\")`. - Then, use `BiocManager::install()`\nto install packages from Bioconductor.\n\n**Example Command** - For example, to install the `GenomicFeatures`\npackage from Bioconductor, use:\n`BiocManager::install(\"GenomicFeatures\")`.\n\n**Bioconductor Versioning** - Bioconductor releases are semi-annual and\ntied to specific versions of R. Ensure that your version of R is\ncompatible with the version of Bioconductor you are using.\n\n### Loading Packages into R Session\n\n**Using `library()`** - Once a package is installed, load it into your R\nsession using the `library()` function. - For example, to load\n`ggplot2`, use: `library(ggplot2)`.\n\n**Checking Installed Packages** - Use `installed.packages()` to get a\nlist of all packages installed in your R environment.\n\n### Troubleshooting Package Installation\n\n**Error Messages** - Pay close attention to any error messages during\ninstallation; they often provide clues about the issue.\n\n**Dependency Issues** - If there are missing dependencies, try\ninstalling those packages separately.\n\n**Compatibility with R Version** - Some packages may not be compatible\nwith your current version of R. Check the package documentation for\nversion requirements.\n\n**Internet Connection and Firewalls** - Ensure a stable internet\nconnection. Firewalls or network policies may sometimes block R from\naccessing external servers.\n\n::: callout-tip\n**Additional Resources** - Type the following commands into your R\nconsole and hit enter. This will open an R documentation window in the\nFiles pane, specifically in the Help Tab. This window provides detailed\ninformation about these commands. At this stage, it's not necessary to\ndelve deeply into understanding every aspect of these commands. However,\nthis method is a valuable tool for learning more about packages and\nfunctions in R as you progress. - For R documentation, use:\n`?install.packages` and `?library`\n:::\n\n## Exercise 7\n\nThis exercise is designed to familiarize you with the process of\ninstalling and loading R packages, and exploring their functions. You'll\nget hands-on experience with some of the basic data analysis packages in\nR.\n\n1.  **Install Package**:\n    -   Install the following popular R packages for data analysis:\n        -   `ggplot2` for data visualization.\n        -   `readr` for reading rectangular data.\n    -   Install your chosen package using the command\n        `install.packages(\"packageName\")`, replacing `\"packageName\"`\n        with the name of the package.\n    -   We will use these two packages in next two sections\n2.  **Load the Package**:\n    -   Load the package into your R session using\n        `library(packageName)`.\n3.  **Explore Package Functions**:\n\n-   Using RStudio's Help Tab:\n\nIn RStudio, locate the Help tab, which is typically found in the lower\nright panel in the File pane. Type the name of the package or a specific\nfunction from the package in the search bar. Press enter, and a new page\nwill open, displaying detailed information about the package or\nfunction.\n\n::: {.callout-tip collapse=\"true\" title=\"Excercise 7: Click to see solution\"}\n1.  **Install**\n\nInstall one by one\n\n`install.packages(\"ggplot2\")`\n\n`install.packages(\"readr\")`\n\nOR install in one go\n\n`install.packages(\"ggplot2\", \"readr\")`\n\nWhen you run the above codes you will see the following text (or\nsomething similar) in your console It may take sometime if it is also\ninstalling the dependencies (other packages required for ggplot2)\n\n`trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/ggplot2_3.2.1.zip`\n`Content type 'application/zip' length 3976166 bytes (3.8 MB)`\n`downloaded 3.8 MB`\n\n`package ‘ggplot2’ successfully unpacked and MD5 sums checked`\n\n`The downloaded binary packages are in` `C:\\Users\\...\\your\\directory`\n\nIf you see this message it means that the package is installed\nsuccessfully. Do not be afraid of the text in red color that mostly\nsymbolize the Error or Warning message.\n\n2.  **Load the packages**\n\nUse the library() function to load the packages ggplot2 and readr as\nshown below\n\n`library(ggplot2)`\n\n`library(readr)`\n\nWhen you run these commands, they should execute without any errors or\nwarning messages, and typically, you won't see any output in the\nconsole. If the packages are loaded successfully, R proceeds silently,\nindicating that everything is functioning correctly.\n\n3.  **Explore**\n\nUsing RStudio's Help Tab\n\n1.  **Locating the Help Tab**:\n    -   In RStudio, find the Help tab in the lower right panel,\n        typically under the File pane.\n2.  **Searching for Package or Function Documentation**:\n    -   In the search bar, type `ggplot2` and press enter. A new\n        documentation page opens, showing detailed information about the\n        `ggplot2` package. It has its own webpage and GitHub page please\n        click on link `https://ggplot2.tidyverse.org` to explore more\n        about ggplot usage.\n\n    -   In the search bar, type `ggplot`, which is a function in the\n        `ggplot2`, package and press enter. A new documentation page\n        opens with Description, Usage, Arguments, Details and Exxamples\n        on information page.\n\n    -   In the search bar, type `readr` and press enter. You will see\n        again a page open up with links to web pages. You can click on\n        `https://readr.tidyverse.org` to get more information on the\n        readr package.\n\n    -   In the search bar, type `read_csv` and press enter. You will see\n        again a page open up with information all `read` function\n        available in the `readr` package.\n\nNavigate down and find the `read_csv` function and read the arguments it\ncan take.\n\n![](../images/read_csv_help.PNG)\n\nHere `read_csv()` is function that performs a specific task. Everything\ninside the `read_csv()` within the small closed brackets, separated by\ncomma is an argument. For example `col_names` is an argument and it can\ntake logical values either `TRUE` or `FALSE`. If you do not specify the\nargument, it will take the default value. For example, if you do not\nspecify the argument `col_names` it will take the default value `FALSE`\nand will not read the first row of the data as column names.\n\n**Summary**\n\n-   Through the Help tab, you can access a wealth of information about R\n    packages and their functions.\n-   This process helps in understanding how specific functions work,\n    including their required inputs (arguments) and what they return.\n-   By exploring these resources, you gain insights into how to\n    effectively use these packages in your R programming tasks.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}