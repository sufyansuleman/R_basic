{
  "hash": "523ca792280e62d50b9153b52c37e6a6",
  "result": {
    "markdown": "# Vectors and Factors {#sec-vectors}\n\n\n\n\n\n## Creating and Manipulating Vectors\n\nVectors are fundamental data structures in R, which allow you to store\nmultiple values in a single variable. These values should be of the same\ndata type (e.g., all numeric, all character, etc.). Vectors are ordered,\nmeaning that the values have a specific order in the vector.\n\n::: callout-important\nMoving forward, please work within the `workbook` file you created\nearlier. To strengthen your coding skills and develop finger muscles\nmemory, we recommend typing out the code inside the code chunks as you\nlearn and practice R.\n:::\n\n### Creating Vectors\n\nYou can create a vector using the `c()` function, which stands for\nconcatenate. Here's how:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a numeric vector\nnumeric_vector <- c(1, 3, 5, 7, 9)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a character vector\ncharacter_vector <- c(\"apple\", \"banana\", \"cherry\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a logical vector\nlogical_vector <- c(TRUE, FALSE, TRUE)\n```\n:::\n\n\n### Accessing Vector Elements\n\nYou can access individual elements of a vector using square brackets\n\\[\\] with the index (position) of the element in the vector that you\nwant.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Accessing the second element of numeric_vector\nnumeric_vector[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# here we asked R what element is at index 2\n# the answer is  3\n```\n:::\n\n\n### Manipulating Vectors\n\nThere are various ways to manipulate vectors in R. Some of them include:\n\nAdding Elements: You can add elements to a vector using the c()\nfunction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding an element to numeric_vector\nnumeric_vector <- c(numeric_vector, 11)  # numeric_vector is now c(1, 3, 5, 7, 9, 11)\n```\n:::\n\n\nRemoving Elements: A common way to remove elements is by using \\[ \\] and\ngiving the index of the element in the vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Removing the first element from numeric_vector\nnumeric_vector <- numeric_vector[-1]  # numeric_vector is now c(3, 5, 7, 9, 11)\n```\n:::\n\n\nChanging Elements: You can change the value of a vector element by\nassigning a new value to it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Changing the third element of numeric_vector\nnumeric_vector[3] <- 10  # numeric_vector is now c(2, 3, 10, 5, 6)\n```\n:::\n\n\n## Excercise 3\n\nNow it's your turn to practice!\n\n1.  Create a character vector with names of three of your favorite\n    fruits.\n2.  Access and print the second element of the vector.\n3.  Add another favorite fruit to your vector.\n4.  Remove the first element from your vector.\n5.  Change the last element of your vector to a different food item.\n6.  On every step verify the output, is it what you expected?\n\n::: {.callout-tip collapse=\"true\" title=\"Excercise 3: Click to see solution\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create a character vector with names of three of your favorite fruits.\nfavorite_fruits <- c(\"Apple\", \"Banana\", \"Cherry\")\n\n# 2. Access and print the second element of the vector.\nsecond_fruit <- favorite_fruits[2]\nprint(second_fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Banana\"\n```\n:::\n\n```{.r .cell-code}\n# 4. Add another favorite fruit to your vector.\nfavorite_fruits <- c(favorite_fruits, \"Date\")\nprint(favorite_fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Apple\"  \"Banana\" \"Cherry\" \"Date\"  \n```\n:::\n\n```{.r .cell-code}\n# 4. Remove the first element from your vector.\nfavorite_fruits <- favorite_fruits[-1]\nprint(favorite_fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Banana\" \"Cherry\" \"Date\"  \n```\n:::\n\n```{.r .cell-code}\n# 4. Change the last element of your vector to a different fruit item.\n\nfavorite_fruits[3] <- \"Elderberry\"\nprint(favorite_fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Banana\"     \"Cherry\"     \"Elderberry\"\n```\n:::\n\n```{.r .cell-code}\n# Now, the favorite_fruits vector should be: c(\"Banana\", \"Cherry\", \"Elderberry\")\n```\n:::\n\n:::\n\n## Factors and levels\n\nWhen working with data in R, we often deal with categorical variables,\nwhich are variables that can be divided into different categories, such\nas \"Yes\" or \"No\", or \"Small\", \"Medium\", \"Large\". In R, we use a special\ntype of variable called a *factor* to handle these categories. Think of\nfactors as containers that hold and manage these categories, which we\ncall *levels*.\n\n### Understanding Factors\n\nImagine you're sorting fruits into baskets. Each basket is labeled with\nthe name of a fruit. In R, each basket is like a *level* of a factor.\nThe factor is the concept of \"fruit types\". If you have three types of\nfruits---apples, bananas, and cherries---then your factor has three\nlevels: \"Apple\", \"Banana\", and \"Cherry\".\n\n**Why Use Factors?**\n\n-   **Organization for Analysis:** Just as baskets help us organize\n    fruits, factors help organize our data, making it easier to analyze.\n-   **Clear Categories:** Even if we didn't collect any cherries, our\n    \"fruit type\" factor still knows cherries exist as a category,\n    keeping our data consistent.\n-   **Order Matters:** We can order our factors (like saying small,\n    medium, and large sizes), which is important for analysis that\n    depends on ranking.\n-   **Visualization:** Factors help R know how to group and label data\n    in charts, which makes our visualizations clear and accurate.\n\n**Practical Example: Fruit Count Chart with factor levels**\n\nLet's relate this to our fruit count chart below. We categorized the\ncount of different fruits. In our chart, each fruit type is a level in\nour factor. This allows us to make a clear and organized bar chart,\nshowing us how many of each fruit type we have. Remember, factors are\nthere to make our data analysis and visualization tasks easier and more\naccurate, much like baskets help keep fruits organized in real life!\n\n::: callout-note\nMove your cursor over the bars in the chart to view the precise counts\nof each fruit type.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-55355bdc047d57ee60d7\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-55355bdc047d57ee60d7\">{\"x\":{\"data\":[{\"orientation\":\"v\",\"width\":0.89999999999999991,\"base\":0,\"x\":[1],\"y\":[23],\"text\":\"Fruit:  Apple <br>Count:  23 <br>Total Count:  72\",\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(141,211,199,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Apple\",\"legendgroup\":\"Apple\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":0.90000000000000013,\"base\":0,\"x\":[2],\"y\":[15],\"text\":\"Fruit:  Banana <br>Count:  15 <br>Total Count:  72\",\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(255,255,179,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Banana\",\"legendgroup\":\"Banana\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":0.90000000000000036,\"base\":0,\"x\":[3],\"y\":[19],\"text\":\"Fruit:  Cherry <br>Count:  19 <br>Total Count:  72\",\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(190,186,218,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Cherry\",\"legendgroup\":\"Cherry\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":0.90000000000000036,\"base\":0,\"x\":[4],\"y\":[10],\"text\":\"Fruit:  Date <br>Count:  10 <br>Total Count:  72\",\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(251,128,114,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Date\",\"legendgroup\":\"Date\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"orientation\":\"v\",\"width\":0.90000000000000036,\"base\":0,\"x\":[5],\"y\":[5],\"text\":\"Fruit:  Elderberry <br>Count:  5 <br>Total Count:  72\",\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(128,177,211,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Elderberry\",\"legendgroup\":\"Elderberry\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":43.762557077625573,\"r\":7.3059360730593621,\"b\":40.182648401826491,\"l\":37.260273972602747},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"title\":{\"text\":\"Fruits Count by factors\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":17.534246575342465},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,5.5999999999999996],\"tickmode\":\"array\",\"ticktext\":[\"Apple\",\"Banana\",\"Cherry\",\"Date\",\"Elderberry\"],\"tickvals\":[1,2,3,4,5],\"categoryorder\":\"array\",\"categoryarray\":[\"Apple\",\"Banana\",\"Cherry\",\"Date\",\"Elderberry\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Fruit Type\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-1.1500000000000001,24.149999999999999],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"5\",\"10\",\"15\",\"20\"],\"tickvals\":[0,5,10,14.999999999999998,20],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"5\",\"10\",\"15\",\"20\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Count\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"30a05b29181\":{\"x\":{},\"y\":{},\"fill\":{},\"text\":{},\"type\":\"bar\"}},\"cur_data\":\"30a05b29181\",\"visdat\":{\"30a05b29181\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n**Practical Example: Fruit Count Chart without factor levles** In this\nexample, we didn't specify to R that our data should be treated as\ncategorical with distinct factor levels. Instead, we've labeled all\nentries simply as \"All Fruits,\" akin to placing various fruits into one\nbasket. This approach makes it challenging to discern the quantity of\neach individual fruit type because we're presented with a combined total\nrather than a detailed breakdown.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-3a312ae483df7876fd3f\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-3a312ae483df7876fd3f\">{\"x\":{\"data\":[{\"orientation\":\"v\",\"width\":[0.89999999999999991,0.89999999999999991,0.89999999999999991,0.89999999999999991,0.89999999999999991],\"base\":[0,72,144,216,288],\"x\":[1,1,1,1,1],\"y\":[72,72,72,72,72],\"text\":\"Total Count:  72\",\"type\":\"bar\",\"textposition\":\"none\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(141,211,199,1)\",\"line\":{\"width\":1.8897637795275593,\"color\":\"transparent\"}},\"name\":\"Apple Banana Cherry Date Elderberry\",\"legendgroup\":\"Apple Banana Cherry Date Elderberry\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":43.762557077625573,\"r\":7.3059360730593621,\"b\":25.570776255707766,\"l\":43.105022831050235},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"title\":{\"text\":\"Fruits count without factors\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":17.534246575342465},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,1.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"Apple Banana Cherry Date Elderberry\"],\"tickvals\":[1],\"categoryorder\":\"array\",\"categoryarray\":[\"Apple Banana Cherry Date Elderberry\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-18,378],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"100\",\"200\",\"300\"],\"tickvals\":[0,99.999999999999986,200,300],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"100\",\"200\",\"300\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Total Count\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"30a0268d35da\":{\"x\":{},\"y\":{},\"fill\":{},\"text\":{},\"type\":\"bar\"}},\"cur_data\":\"30a0268d35da\",\"visdat\":{\"30a0268d35da\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Creating and converting Factors\n\nYou can create a factor from a vector using the `factor()` function.\nHere's how:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector of fruit names\nfruit_vector <- c(\"Apple\", \"Banana\", \"Cherry\", \"Apple\", \"Cherry\", \"Banana\", \"Banana\", \"Cherry\", \"Apple\",\"Apple\",\"Apple\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_vector #  you can get the value of a vector just by runnin gits name in console or in the code chunk\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Apple\"  \"Banana\" \"Cherry\" \"Apple\"  \"Cherry\" \"Banana\" \"Banana\" \"Cherry\"\n [9] \"Apple\"  \"Apple\"  \"Apple\" \n```\n:::\n:::\n\n\n**Convert the vector to a factor**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In this code, convert the fruit_vector vector into a factor using the factor() function.\nfruit_factor <- factor(fruit_vector)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_factor  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Apple  Banana Cherry Apple  Cherry Banana Banana Cherry Apple  Apple \n[11] Apple \nLevels: Apple Banana Cherry\n```\n:::\n:::\n\n\n**Levels of a Factor** The unique values in a factor are called levels.\nYou can see the levels of a factor using the levels() function. Get the\nlevels of factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(fruit_factor)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Apple\"  \"Banana\" \"Cherry\"\n```\n:::\n:::\n\n\n**Getting Summary of Factors**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fruit_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Apple Banana Cherry \n     5      3      3 \n```\n:::\n:::\n\n\nYou can change the number of the elements (fruit names in the\nfruit_vector) and then play with it.\n\n::: callout-note\nWhy get summary of factors? It is because just like you'd want to know\nhow many of each type of fruit you have in the basket, in statistics,\nyou often need to sort data into categories and count them. Factors help\nyou do that in R.\n:::\n\n### Ordered Factors\n\n**Understanding Ordered Factors in R** In R, when we talk about data\nlike T-shirt sizes or class levels, we call them \"factors.\" They are\nlike labels we put on things that are similar, such as \"Small,\"\n\"Medium,\" \"Large\" for sizes.\n\nBut sometimes, it's not enough to just label these things. We need to\nremember that some labels come before others, like how \"Small\" is\nsmaller than \"Medium.\" We use something called \"ordered factors\" to do\nthis.\n\n**Why Ordered Factors Matter**\n\nThink about lining up for a race. The order matters, right? First,\nsecond, third. If we mix it up, it would be confusing. It's the same\nwith our data. If we don't use ordered factors when the order is\nimportant, we might get mixed up results.\n\n**How to Make Ordered Factors**\n\nHere's how we make ordered factors in R:\n\n1.  We tell R which labels we have, like \"Small,\" \"Medium,\" \"Large.\"\n2.  We tell R to remember the order by saying `TRUE` to \"ordered.\"\n\n**Example with T-Shirt Sizes**\n\nLet's say we're sorting T-shirts by size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsizes <- c(\"Small\", \"Medium\", \"Large\", \"Medium\", \"Small\")\n```\n:::\n\n\nTo keep the sizes in order, we make an ordered factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nordered_sizes <- factor(sizes, ordered = TRUE, levels = c(\"Small\", \"Medium\", \"Large\"))\n```\n:::\n\n\nNow R knows that \"Small\" comes before \"Medium,\" and \"Medium\" comes\nbefore \"Large.\"\n\n**Using Ordered Factors**\n\nWhen we have our sizes in order, we can do things like see if one size\nis bigger than another, or make graphs where \"Small\" comes before\n\"Medium,\" not just wherever they popped up in our list. So, ordered\nfactors help us keep our data tidy and in line, like students in a\nschool line-up. It helps us make sense of things that should follow a\ncertain order, giving us clearer results when we're working with our\ninformation. This is super helpful for making sure we understand our\ndata the right way.\n\n### Converting Factors\n\nLet's use a fruit basket again as an example to illustrate this concept:\n\nSuppose you have a basket filled with an assortment of fruits: apples,\nbananas, and cherries. You decide to organize them by putting a little\nsticker on each that says \"apple\", \"banana\", or \"cherry\". In R, this is\nlike creating a factor for your fruits.\n\nHere's some R code that might represent our fruit basket as a factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits <- c(\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")\nfruit_factor <- factor(fruits)\n```\n:::\n\n\nNow, let's explore the conversions and understand why and when you might\nneed them:\n\n1.  **To Character:**\n\n    Sometimes, you want to check the stickers without sorting the\n    fruits. This is like converting your factor to a character vector.\n    You're not interested in how many apples or cherries you have, just\n    what's in the basket.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_labels <- as.character(fruit_factor)\n```\n:::\n\n\n**Why and when you need this:** You might need to do this when you're\nonly interested in the names of the fruits for a task like labeling a\nshelf, where the count doesn't matter.\n\n2.  **To Numeric:**\n\nOn other occasions, you might decide to assign a number to each type of\nfruit: apples = 1, bananas = 2, cherries = 4. This is like converting\nyour factor to a numeric vector. Instead of names, each fruit is\nrepresented by a number.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit_numbers <- as.numeric(fruit_factor)\n```\n:::\n\n\n**Why and when you need this:** This is useful when you're entering your\nfruit data into a system that requires numbers instead of names, maybe\nfor a stocktaking system that tracks inventory with codes instead of\nfruit names.\n\nIn summary, whether you convert a factor into characters or numbers\ndepends on what you need at the moment:\n\n-   Use characters when you want to work with the names or labels\n    directly.\n-   Use numbers when you need to enter data into a numerical system or\n    do some sort of calculation where categories are represented by\n    numbers.\n\n### Excercise 4\n\nNow, practice what you've learned!\n\n1.  Create a factor variable with your favorite colors.\n2.  Find out the levels of your factor variable.\n3.  Create an ordered factor with levels \"Low\", \"Medium\", \"High\".\n4.  Get a summary of your ordered factor.\n5.  Convert the factor back to a character vector.\n\n::: {.callout-tip collapse=\"true\" title=\"Excercise 4: Click to see solution\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create a factor variable with your favorite colors.\nfavorite_colors <- c(\"Red\", \"Blue\", \"Green\", \"Blue\", \"Red\")\ncolor_factor <- factor(favorite_colors)\n\n# 2. Find out the levels of your factor variable.\ncolor_levels <- levels(color_factor)\ncolor_levels  # Output: \"Blue\" \"Green\" \"Red\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Blue\"  \"Green\" \"Red\"  \n```\n:::\n\n```{.r .cell-code}\n# 5. Create an ordered factor with levels \"Low\", \"Medium\", \"High\".\nordered_vector <- c(\"Low\", \"Medium\", \"High\", \"Medium\", \"Low\")\nordered_factor <- factor(ordered_vector, ordered = TRUE, levels = c(\"Low\", \"Medium\", \"High\"))\n\n# 5. Get a summary of your ordered factor.\nordered_summary <- summary(ordered_factor)\nordered_summary  # Output: a table showing the counts of each level\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Low Medium   High \n     2      2      1 \n```\n:::\n\n```{.r .cell-code}\n# 5. Convert the factor back to a character vector.\nchar_vector <- as.character(ordered_factor)\nchar_vector  # Output: \"Low\" \"Medium\" \"High\" \"Medium\" \"Low\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Low\"    \"Medium\" \"High\"   \"Medium\" \"Low\"   \n```\n:::\n:::\n\n:::\n\n",
    "supporting": [
      "vectors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<script src=\"../site_libs/plotly-binding-4.10.3/plotly.js\"></script>\r\n<script src=\"../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"../site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n<link href=\"../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}