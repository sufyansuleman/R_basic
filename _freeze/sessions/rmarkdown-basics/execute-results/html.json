{
  "hash": "2f1cf4ae2e8ba563103cab9a60391723",
  "result": {
    "markdown": "# R Markdown Basics {#sec-rmarkdown-basics}\n\n\n\n\n\n## Creat an R Markdown file\n\nIn this section, you will learn how to create a new R Markdown file, and\nsave it with a specific name in a designated directory. This is a\nfundamental skill that will help you keep your work organized as you\nlearn R.\n\n-   **Instructions**\n\n1.  **Launch RStudio**:\n    -   Now that the RStudio is open on your computer.\n2.  **Create a New Directory**:\n    -   In the Files pane (bottom-right by default), navigate to a\n        location on your computer where you'd like to save your work.\n    -   Click on the \"New Folder\" icon, and name the new folder\n        `learning_R`.\n    -   Please try to avoid creating the folder on a remote drive as it\n        will make it much slower to work with. Make folder on your\n        computer in Documents or Drive of choice.\n3.  **Set Working Directory**:\n    -   Once the folder is created, set it as your working directory by\n        clicking on \"Session\" on top pane, then \"Set As Working\n        Directory\" -\\> Choose directory and locate the directory\n        `learning_R` and press OK.\n\nOR by typing in the console without \\#\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# setwd(\"Drive:/path/to_your/directory/learning_R\")\n```\n:::\n\n\n4.  **Create a New R Markdown file**:\n    -   Go to the toolbar at the top of the RStudio window.\n    -   Click on \"File\", then \"New File\", and select \"R Markdown\".\n5.  **Save the R Markdown file**:\n    -   Now, save the new R Markdown by clicking on \"File\" in the\n        toolbar, then \"Save\" (or by pressing `Ctrl + S` on your\n        keyboard).\n    -   In the dialog box that appears, navigate to the `learning_R`\n        directory that you created.\n    -   Name your file `workbook` and click \"Save\".\n    -   It will be saved with file extension `.Rmd`\n6.  **Verify the file is created**:\n    -   In the Files pane, navigate to the `learning R` directory.\n    -   Confirm that your `workbook.Rmd` file is saved there.\n\n::: callout-note\n-   When working with R, it's important to develop the habit of using\n    underscores (\\_) instead of spaces when naming files and folders.\n-   In this module, we will work in a R Markdown file. We won't be\n    creating an R Script at this stage.\n-   R Markdown is incredibly useful at this point, functioning much like\n    a notebook where you can explore and play around with data.\n-   Going forward, ensure you follow the steps and exercises in order,\n    as each step typically builds upon the previous one. Skipping ahead\n    may result in missing crucial information and getting errors.\n:::\n\n## Read and Reflect\n\n-   How does organizing your files into designated directories help\n    streamline your workflow?\n-   Why is it important to give meaningful names to your R Scripts?\n-   How is it related to your research directories and file names, do\n    you also write names like results1, results2, results3, results\n    final, results commented PI and results4, results final2.\n\nTake a moment to reflect on these questions. As you continue to learn R,\nmaintaining an organized workspace will become increasingly important.\n\n::: callout-note\nWant to learn more about the naming conventions in R?\n\nCheck out this for naming: [files and\ndirectories](https://style.tidyverse.org/files.html#:~:text=File%20names%20should%20be%20meaningful,letters%2C%20%2D%20%2C%20and%20_%20.&text=If%20you%20later%20realise%20that,use%2002a%20%2C%2002b%20%2C%20etc)\nand this for\n[Objects](https://bookdown.org/content/d1e53ac9-28ce-472f-bc2c-f499f18264a3/names.html)\n:::\n\n## Using the R Markdown file\n\n-   If R Markdown file **workbook.Rmd** that you recently created is not\n    already open, you can open it by clicking on its name in the file\n    pane.\n\nWhen the file is open the the RStudio interface look like this.\n\n![RStudio Interface on Start](../images/RStudio_interface_2.PNG)\n\n-   And the `workbook` looks like this. Does it in your case?\n\n![RMarkdown file startup](../images/RMarkdwon_example.PNG)\n\n-   Read the content of the file and then delete the everything below\n    \\## R Markdown\n\n-   Let's proceed to complete Exercise 3 inside the **workbook.Rmd**\n    file.\n\n## Excercise 1\n\n-   **Discovering Data Types**\n\n-   Inside the opened workbook place your cursor below the \\## R\n    Markdown\n\n-   To insert a code chunk, press `Ctrl + Alt + I`, or alternatively,\n    you can click on \"Code\" at the top \"on the Toolbar\" and then select\n    \"Insert Chunk\".\n\nUse the class() function to discover the data type of a variable:\n\n::: callout-note\nIn R, the class() function is used to determine the data type of an\nobject. This function is particularly useful when working with different\ntypes of data structures in R, such as vectors, matrices, data frames,\nand lists. It helps you understand how R is interpreting your data,\nwhich is crucial for effective data manipulation and analysis\n:::\n\n\n\n\n\n::: {.callout-tip collapse=\"true\" title=\"Tip\"}\n1.  Recall that we created the objects num1, char1, and log1 earlier in\n    Section 2.4. If they are visible in your environment pane, employ\n    the class function to ascertain the type of data they contain. If\n    they are not visible, recreate them by rerunning the code from\n    sections 2.4.1 to 2.4.3.\n\n2.  When executing code in R Markdown, you can either click the green\n    arrow button at the top right corner of the code chunk to run the\n    entire code chunk or position your cursor on the specific line of\n    code you wish to run and press Ctrl + Enter, which will execute only\n    that particular line of code.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(num1)  # Output: \"numeric\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(char1) # Output: \"character\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(log1)  # Output: \"logical\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n## Excercise 2\n\n1.  Create a numeric variable and perform a basic arithmetic operation.\n2.  Create a character variable containing your name.\n3.  Create a logical variable by comparing two numbers.\n4.  perform this inside the workbook file\n\n::: {.callout-warning title=\"Variable names to avoid\"}\nYou have the flexibility to choose any name for your variables. However,\nit is recommended to refrain from utilizing names of functions and\nobjects from base R to prevent any potential conflicts or unexpected\nbehavior. Here are some examples to consider:\n\n1.  `c`\n2.  `df`\n3.  `mean`\n4.  `sum`\n5.  `data`\n6.  `matrix`\n7.  `vector`\n8.  `list`\n9.  `factor`\n10. `library`\n\nThese names are commonly used in R for various purposes, and using them\nas variable names can lead to confusion or errors in your code. It's\ngenerally a good practice to choose descriptive and unique names for\nyour variables to avoid any issues.\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Excercise 2: Click to see solution\"}\n1.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeric_variable <- 10\narithmetic_result <- numeric_variable + 5  # Adding 5 to the numeric_variable\n```\n:::\n\n\n2.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nname_variable <- \"Your Name\"\n```\n:::\n\n\n3.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomparison_variable <- (10 > 5)  # Checking if 10 is greater than 5\n```\n:::\n\n\n-   **In this solution:**\n\n1.  A numeric variable named `numeric_variable` is created and assigned\n    a value of 10. A basic arithmetic operation (addition) is then\n    performed on this variable.\n2.  A character variable named `name_variable` is created and assigned\n    the value \"Your Name\".\n3.  A logical variable named `comparison_variable` is created by\n    comparing two numbers using the greater than (`>`) operator.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}