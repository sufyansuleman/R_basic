[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started with R",
    "section": "",
    "text": "Course overview\nThis course is specifically designed for those new to R, aiming to facilitate a transition from software platforms like STATA or Excel. It’s an introductory course, ideal for beginners without prior R experience. If you’re already acquainted with R, this course may revisit concepts you know, but you’re welcome to take for a fundamentals refresher. While it’s not a comprehensive guide to R and RStudio, nor a course on statistics, data analysis, programming, or computer science, it provides a solid foundation in R and RStudio for beginners. Keep an eye out for our future courses on basic statistical analysis and data manipulation.\n\n\nAims\n\nIntroduce R and RStudio to learners.\nGuide through R and RStudio installation, including R package management.\nTeach essential R syntax, operations, and R Markdown usage.\nEquip learners to handle R data structures for analysis tasks.\nEngage and actively involve learners throughout the course.\n\n\n\nLearning Objectives\nUpon successful completion of this course, you’ll gain proficiency in R programming with these key abilities:\n\nUnderstand R’s fundamentals and the RStudio IDE.\nInstall R and RStudio effortlessly.\nMaster R syntax, including variables, vectors, and basic operations.\nUtilize R Markdown for documentation.\nHandle vectors effectively and explore data frames and lists.\nNavigate R packages: installation, loading, and usage.\nAcquire skills in data import, visualization, and accessing help in RStudio.\n\n\n\nPrerequisites\nYou would need a computer with an internet connection to access the course material. You can use any operating system (Windows, Mac, or Linux) to follow along with the course. However, we recommend using a Windows or Mac computer for the best experience. You’ll also need to install R and RStudio on your computer. We’ll cover this in the next section."
  },
  {
    "objectID": "sessions/introduction.html#introduction-to-r",
    "href": "sessions/introduction.html#introduction-to-r",
    "title": "1  Overview of R and RStudio",
    "section": "1.1 Introduction to R",
    "text": "1.1 Introduction to R\nR is a powerful programming language primarily used for statistical computing and graphics. It’s a popular choice among statisticians, data analysts, and researchers for data analysis, statistical modeling, and data visualization. In today’s research landscape, the ability to analyze data is an essential skill regardless of your scientific field, whether it’s health and medical science, other life sciences, physical sciences, technology, business or humanities. This is because each experiment and observation generates data that must be processed, visualized and interpreted to facilitate informed decision-making and enhance human understanding. In this regard, R emerges as an excellent tool for data analysis, offering a multitude of benefits that make it a preferred choice among various programming languages. In this chapter, we will learn about the key features of R and RStudio, and how to install and navigate the RStudio interface.\n\n1.1.1 Key Features of R:\nR is an excellent option for data analysis, and there are several reasons to choose this software:\nComprehensive: - R provides a wide range of statistical and graphical techniques needed for data handling, analysis and visualization, and more.\nOpen Source: - Most importantly, as a free, open-source software, R is accessible to anyone and can be customized to meet specific research needs.\nCommunity Support: - R has a vast community of users and developers who contribute to its growth by sharing code, creating packages, and providing support through forums and social media platforms (That’s also free, isn’t it amazing!!).\nVersatility: - R is versatile and can handle data from various formats, including CSV, Excel, SQL, and more.\nIntegration: - R can be integrated with other software and programming languages, such as Python, C++, and Java, to enhance its capabilities.\nVisualization: - R excels at data visualization, providing numerous options for creating graphs, charts, and plots that can help to better understand and communicate data insights.\nExtensibility: - R can be extended with over 18,000 packages available on CRAN, which cover a wide range of disciplines and applications."
  },
  {
    "objectID": "sessions/introduction.html#introduction-to-rstudio",
    "href": "sessions/introduction.html#introduction-to-rstudio",
    "title": "1  Overview of R and RStudio",
    "section": "1.2 Introduction to RStudio",
    "text": "1.2 Introduction to RStudio\nRStudio is an integrated development environment (IDE) for R. It provides a user-friendly interface to R, making it easier for individuals to interact with and learn R. Lets understand this with and example, R and RStudio are like a car and its dashboard respectively. R is the engine that powers your data analysis tasks, while RStudio is the dashboard that helps you interact with that engine more easily.\n\n1.2.1 R: The Engine\nR is a programming language designed for statistical analysis, graphics, and data visualization. When you write and run a script in R, the R software processes your commands and returns the results. However, R by itself doesn’t provide a very user-friendly interface.\n\n\n1.2.2 RStudio: The Dashboard\nRStudio is an Integrated Development Environment (IDE) for R. It provides a user-friendly interface to interact with R. It doesn’t replace R, but rather, it complements R to make data analysis tasks easier and more interactive.\nHere’s how they work together:\nWriting Code: - In RStudio, you write your R code in an R script or R Markdown file (we will learn shortly). This is like having a notepad where you write down the instructions you want the R engine to execute.\nRunning Code: - Once you’ve written your code, you can run it within RStudio. When you do this, RStudio sends your code to the R engine for execution.\nViewing Results: - The results of your code are then displayed within RStudio, either in the console (we will learn shortly), in plots, or within your R Markdown. document. Interactive Features: - RStudio provides various interactive features like the ability to inspect data objects, view plots, manage your R packages, and even debug your code.\nAdditional Tools: - RStudio also provides additional tools that make working with R easier, such as auto-completion of code, integrated help and documentation, and support for version control systems like Git. Learning and Debugging: - With its user-friendly interface, RStudio makes it easier to learn R and debug your code. It provides helpful error messages and debugging tools to help you find and fix errors in your code.\nIn summary, R is the core engine where all your data analysis happens, and RStudio is the friendly dashboard that helps you interact with R efficiently. By using RStudio, you can focus more on your data analysis tasks and less on managing the technicalities of the R language."
  },
  {
    "objectID": "sessions/introduction.html#installing-r-and-rstudio",
    "href": "sessions/introduction.html#installing-r-and-rstudio",
    "title": "1  Overview of R and RStudio",
    "section": "1.3 Installing R and RStudio",
    "text": "1.3 Installing R and RStudio\n\n1.3.1 Installing R\nTo start using R, you first need to install it on your computer. Here’s how to do it:\n\nVisit the CRAN website: Go to the Official CRAN website to download R. CRAN is the Comprehensive R Archive Network, which hosts the R software.\nChoose your Operating System: On the CRAN website, select the version of R suitable for your operating system (Linux, macOS, or Windows).\nDownload and Install for Windows:\n\nIf you’re using Windows, click on “Download R for Windows.”\nSelect “install R for the first time” if this is your initial installation.\nGrant the installer administrative permissions if prompted.\nChoose your preferred language when asked.\n\n\n\nSelect Language\n\n\nFollow the on-screen instructions. R is typically installed in the C drive, but you can choose a different location if you prefer.\nComplete the installation process.\n\n\n\nInstallation Process\n\n\nClick “Finish” upon completion.\n\n\n\nSetup Complete\n\n\nYou’ll find R in your start menu.\n\nVerify Installation: Once installed, R can be found in the start menu of your computer. However, we’ll primarily use RStudio for interacting with R.\n\n\n\n1.3.2 Installing RStudio\nRStudio provides a user-friendly interface for working with R. Here’s how to install it:\n\nVisit the RStudio website: Navigate to the Official RStudio website to download RStudio.\nDownload and Install: Scroll down and click on the blue button that says DOWNLOAD RSTUDIO DESKTOP FOR WINDOWS / OR Scroll down more and Select the version of RStudio that matches your operating system and follow the installation instructions. \nAccessing RStudio: After installation, you can find RStudio in your computer’s start menu. Open RStudio by navigating to the start button (or searching in the search bar) and selecting the RStudio app.\nIntegration with R: Now that both R and RStudio are installed, they will work together, as explained in Section 1.2.\n\nThis setup ensures you have both R and RStudio ready for use, providing a complete environment for your R programming journey."
  },
  {
    "objectID": "sessions/introduction.html#navigating-the-rstudio-interface",
    "href": "sessions/introduction.html#navigating-the-rstudio-interface",
    "title": "1  Overview of R and RStudio",
    "section": "1.4 Navigating the RStudio Interface",
    "text": "1.4 Navigating the RStudio Interface\nWhen you open RStudio it looks like this\n\n\n\nRStudio Interface on Start\n\n\n\nRStudio’s interface comprises four main panes:\n\nConsole Pane: The console is the area where R code is run (we will work in console shortly, in Section 2). By default, it is located at the bottom left of the screen, but this can be adjusted in the settings. However, we will keep it in its default position for this demonstration.\n\n\n\nConsole\n\n\nScript Pane: Compose and preserve scripts of R code, which will be your primary works pace. Here, you can perform various tasks such as opening files, writing and executing code, and saving your files, including R scripts and R Markdown documents. Additionally, this area provides the ability to inspect your data by opening the objects you have created. Normally this located at top left of the interface. We will also learn how to open new files write code and save them.\n\n\n\n\n\n\nNote\n\n\n\nYou won’t see the Script pane at this moment, don’t worry. It will appear once you open a file or script.\n\n\n\n\n\nScript pane\n\n\nEnvironment/History Pane: The Environment pane in RStudio displays the current working environment, listing data objects, variables, and functions in the R Section. It provides an easy way to track, interact with, and manage data sets and variables, as well as options to import data, clear the environment, and search for specific variables, simplifying the data analysis process. This is located at top right of the interface. We will soon see how the objects appear in the Environment pane, and how can we interact with them.\n\n\n\nEnvironment pane\n\n\nFiles/Plots/Packages/Help Pane: Access files, view plots, manage packages, and access R help documentation. The Files pane in RStudio helps you navigate and manage project files directly within the interface. The History pane, on the other hand, logs your past R console commands, making it easy to review and re-run them as needed. These features streamline your workflow and enhance reproducibility.\n\n\n\nFiles pane"
  },
  {
    "objectID": "sessions/introduction.html#checking-your-installation",
    "href": "sessions/introduction.html#checking-your-installation",
    "title": "1  Overview of R and RStudio",
    "section": "1.5 Checking Your Installation",
    "text": "1.5 Checking Your Installation\nPlease launch RStudio on your computer. Observe the interface - you should see it divided into three or four panes. This is the standard layout of RStudio.\n\nIf you can see the RStudio interface as described, you’re ready to proceed to the next section.\nIf you do not see the RStudio interface or the panes are not visible, please revisit the previous sections to ensure that R and RStudio are correctly installed on your system."
  },
  {
    "objectID": "sessions/introduction.html#common-troubleshooting-tips",
    "href": "sessions/introduction.html#common-troubleshooting-tips",
    "title": "1  Overview of R and RStudio",
    "section": "1.6 Common Troubleshooting Tips",
    "text": "1.6 Common Troubleshooting Tips\nIf you encounter issues, here are some tips:\n\nEnsure that you have the latest version of R and RStudio. You can check the latest version of R here and the latest version of RStudio here.\nCheck that your script syntax is correct, especially missing parentheses or commas.\nUse the help() function to understand more about R functions and their usage.\nUse the RStudio IDE’s built-in help and documentation features."
  },
  {
    "objectID": "sessions/introduction.html#community-and-support",
    "href": "sessions/introduction.html#community-and-support",
    "title": "1  Overview of R and RStudio",
    "section": "1.7 Community and Support",
    "text": "1.7 Community and Support\nThe R community is vibrant and supportive. Engage with it through:\nStack Overflow for programming questions and answers stackoverflow RStudio Community for RStudio specific questions RStudio Community R-bloggers for articles and tutorials from various R bloggers R-bloggers Twitter for the latest news and updates Twitter"
  },
  {
    "objectID": "sessions/basic-syntax.html#arithmetic-mathematical-operations",
    "href": "sessions/basic-syntax.html#arithmetic-mathematical-operations",
    "title": "2  Basic R Syntax and Operations",
    "section": "2.1 Arithmetic / Mathematical Operations",
    "text": "2.1 Arithmetic / Mathematical Operations\nArithmetic operations are fundamental in R, as in many programming languages. They allow us to perform basic mathematical calculations. In this section, we will explore the primary arithmetic operators available in R.\n\n\n\n\n\n\nNote\n\n\n\nPlease note that there is no need to save any part of this course or create a new file at this moment. We will initially work in the console, and later, we will proceed to create a new R R Script / R Markdown file, where we will write and save our code.\n\n\n\n2.1.1 Operators\nHere are the basic arithmetic operators in R:\n\nAddition (+)\nSubtraction (-)\nMultiplication (*)\nDivision (/)\nExponentiation (^)"
  },
  {
    "objectID": "sessions/basic-syntax.html#using-basic-operators-in-r",
    "href": "sessions/basic-syntax.html#using-basic-operators-in-r",
    "title": "2  Basic R Syntax and Operations",
    "section": "2.2 Using basic operators in R",
    "text": "2.2 Using basic operators in R\nLet’s examine these operators and observe how they function. We will use the console to execute the code. The console is the panel at the bottom left of your RStudio window. You can type code directly into the console and press enter to execute it. The console is a great place to experiment with code, but it is not a good place to save your code. We will learn how to save our code in a later section.\n\n2.2.1 Addition\nYou can type or copy this code chunk and paste it in your console and hit enter\n\n# Addition\n3 + 4  # Output: 7\n\n[1] 7\n\n\nHooray! You’ve just taken your first step into the world of coding with R. When you input “3 + 4”, R calculates that the sum is 7. You might have noticed the [1] preceding your output in the console; don’t worry, this simply indicates that 7 is the first (and only) element in the output. The index, [1], is particularly helpful when you’re dealing with lengthy outputs, as it marks the position of the first element in each line, making it easier to track elements.\n\n\n\n\n\n\nTip\n\n\n\nIndex with continuous numbers\nBelow exercise demonstrate indexing when you are working with large outputs.\nCopy paste the code chunk in the console\n\n# In this code we are telling R to store numbers from 1 to 100 in a an object called \"numbers\" \nnumbers &lt;- 1:100\n\n# and then print the stored object (numbers in this case)\nprint(numbers)\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n\nIn this example, the sequence is straightforward because it consists of ordered numbers from 1 to 100, making it clear that the number at positions 1, 19, 37, 55, 73 and 91. However, the alignment of numbers and their respective positions may vary for each individual, depending on the size of the console pane in use.\nIndex with random numbers\nBelow exercise demonstrate indexing in R when the numbers are random.\n\n# We are telling R to store numbers 1 to 35 randomly in a an object called random_numbers \nrandom_numbers &lt;- rnorm(1:35)\n\n# and then print the stored object (random_numbers in this case)\nprint(random_numbers)\n\n [1] -0.262379265 -0.410165121 -0.368954457 -0.316180780  0.714371604\n [6]  0.507136454  0.451436486  0.735259730 -0.231344973  2.574773110\n[11]  0.231891386 -0.288501194 -0.009018259  1.739951175  0.228046121\n[16] -0.502874683 -0.035044237  0.431658055  0.627265765 -0.357195428\n[21]  0.320919766 -0.756030528  1.409238207 -2.027627361 -0.507993182\n[26] -1.956271902 -1.161724641  1.175870104  0.583805092 -0.042932748\n[31] -1.143212890 -0.220021551  0.558432302 -0.060466562  0.816907161\n\n\nIn this R output, the numbers in square brackets, represent the index position of the first number on each line. However, the alignment of numbers and their respective positions may vary for each individual, depending on the size of the console pane in use and every time you run this code.\nThese index positions help you to quickly locate and reference specific elements in the output, particularly when dealing with large datasets.\n\n\n\n\n2.2.2 Subtraction\nPlease type, the following arithmetic operations into the console, then press enter to execute the code and observe the results. Focus to type is to develop muscles memory.\n\n# Subtraction\n10 - 6  # Output: 4\n\n[1] 4\n\n\n\n\n2.2.3 Multiplication\n\n# Multiplication\n5 * 3  # Output: 15\n\n[1] 15\n\n\n\n\n2.2.4 Division\n\n# Division\n8 / 2  # Output: 4\n\n[1] 4\n\n\n\n\n2.2.5 Exponention\n\n# Exponentiation\n2^3  # Output: 8\n\n[1] 8\n\n\nCertainly! Here’s a section on the Order of Operations in R:\n\n\n2.2.6 Order of Operations in R\nIn R, like in most programming languages, when a line of code contains multiple operations, it’s crucial to understand how these operations are prioritized and executed. This prioritization is governed by the “Order of Operations.” This concept, sometimes known as operator precedence, dictates the rules R follows to evaluate expressions.\nThe order of operations in R is as follows:\n\nParentheses (): Operations inside parentheses are performed first. This allows you to override the default order of operations. For example, in 2 * (3 + 4), the addition inside the parentheses is performed before the multiplication.\nExponents ^: Next, R performs exponentiation. For instance, in 3 ^ 2 * 4, the exponentiation 3 ^ 2 is evaluated before the multiplication.\nDivide / and Multiply *: These operations are on the same level of precedence and are performed from left to right. For example, in the expression 10 / 2 * 3, R first divides 10 by 2, and then multiplies the result by 3.\nAdd + and Subtract -: These also share the same level of precedence and are executed from left to right. In 5 + 3 - 2, R first adds 5 and 3, then subtracts 2 from their sum.\n\nRemember, R follows these rules strictly. However, you can always use parentheses to structure your expressions in a way that reflects the intended calculations. Understanding and utilizing the order of operations is essential for writing accurate and efficient R code.\n\n\n\n\n\n\nActivity\n\n\n\nActivity basic operators and order of operations in R\nType each of the following expressions into the console and press enter to execute:\n\n8 + 2 * 5\n(8 + 2) * 5\n20 / 4 - 3 -20 / (4 - 3)\n3 ^ 2 + 4\n3 ^ (2 + 4)\n\nNote down the output for each expression. Think about why each expression gives the result it does based on the order of operations.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nDo your numbers match with these?\n\n8 + 2 * 5 = 18 (Multiplication before addition)\n(8 + 2) * 5 = 50 (Parentheses first, then multiplication)\n20 / 4 - 3 = 2 (Division before subtraction)\n20 / (4 - 3) = 20 (Parentheses first, then division)\n3 ^ 2 + 4 = 13 (Exponentiation before addition)\n3 ^ (2 + 4) = 729 (Parentheses first, then exponentiation)\n\nUnderstanding the order of operations is essential for accurate computations in R"
  },
  {
    "objectID": "sessions/basic-syntax.html#objetcs-variables-and-vectors",
    "href": "sessions/basic-syntax.html#objetcs-variables-and-vectors",
    "title": "2  Basic R Syntax and Operations",
    "section": "2.3 Objetcs, Variables and Vectors",
    "text": "2.3 Objetcs, Variables and Vectors\nIn R, think of an “object” as a box where you can store all kinds of things. This box could contain a single item, like a marble, or many items, like a bunch of marbles lined up in a row. In R, everything is stored in these kinds of boxes, and each one is called an ‘object.’\nNow, imagine that inside one of these boxes, you have a tray of eggs. This tray is a bit like a “vector” in R. It holds items (the eggs) that are all the same kind, neatly in a row. If you replace eggs with numbers, that’s what a numeric vector is – a line-up of numbers.\nAnd when you talk about a “variable,” it’s like having a name tag on your box. It’s the name you give to your box so you can find it easily among other boxes. For instance, if you put a name tag that says ‘x’ on a box with the number 10 inside, ‘x’ is your way of saying, “This is where I keep my number 10.”\nLet’s simplify that:\n\nObject: A box for keeping any item or set of items in R.\nVector: A tray inside the box that holds items of the same type in a neat line.\nVariable: The name tag on the box, telling you what’s inside without having to open it.\n\n\n2.3.1 Vectors in R\nVectors are one of the most fundamental data types in R. They are collections of elements that are all of the same type. You can create a vector using the c() function, which stands for ‘combine’:\n\n# Creating a numeric vector\nnumbers &lt;- c(1, 2, 3, 4, 5)\n\n# Creating a character vector\nwords &lt;- c(\"apple\", \"banana\", \"cherry\")\n\n\n\n2.3.2 Manipulating Vectors\nOnce you have a vector, you can perform operations on all its elements at once:\n\n# Adding 2 to each element\nnumbers + 2  # Output: 3, 4, 5, 6, 7\n\n[1] 3 4 5 6 7\n\n\n\n# Concatenating strings\npaste(words, \"fruit\")  \n\n[1] \"apple fruit\"  \"banana fruit\" \"cherry fruit\"\n\n\n\n\n2.3.3 Variables in R\nIn R, to assign a value to a variable, we use the assignment operator &lt;-.\nThe &lt;- assignment operator is one of the most utilized operator in R. In RStudio, the keyboard shortcut for the assignment operator &lt;- is Alt + - (Alt and hyphen) on Windows and Linux. On a Mac, you can use Option + - (Option and hyphen) to type the assignment operator &lt;-. So, you would hold down the Alt or Option key and press the hyphen key at the same time.\n\nmy_number &lt;- 10  # 'my_number' is now 10\nmy_text &lt;- \"Hello, world!\"  # 'my_text' is now \"Hello, world!\"\n\nIn these examples:\n\nmy_number and my_text: are the names of the variables.\n10 and “Hello, world!”: are the values we’re storing in the variables.\n&lt;-: is the assignment operator that stores/assigns the values into the variables.\n\n\n\n2.3.4 Using Variables\nOnce a value is stored in a variable, you can use the variable name to access the value:\n\nmy_number + 5  # Output: 15\n\n[1] 15\n\n\nYou can also change the value stored in a variable by assigning a new value to it (older value will be overwritten and will not be available anymore):\n\nmy_number &lt;- 20  # 'my_number' is now 20\n\n\n\n2.3.5 Variable Naming Rules\nWhen naming your variables, keep in mind the following rules:\n\nVariable names should start with a letter.\nThey can contain letters, numbers, underscores (_), and periods (.).\nThey cannot contain spaces or other special characters.\n\n\nvalid_name &lt;- 10  # This is a valid variable name\nalso_valid123 &lt;- 20  # This is also valid\n\nThis line will cause an error because of the space in the variable name Type the code in console without # and see the error message\n\n# not valid &lt;- 30"
  },
  {
    "objectID": "sessions/basic-syntax.html#basic-data-types",
    "href": "sessions/basic-syntax.html#basic-data-types",
    "title": "2  Basic R Syntax and Operations",
    "section": "2.4 Basic Data Types",
    "text": "2.4 Basic Data Types\nUnderstanding data types is crucial as they form the foundation upon which we build our data analysis. In R, the main data types you will encounter are numeric, character, and logical.\n\n2.4.1 Numeric Data Type\nNumeric data types include both integers and floating-point numbers. Here’s how you can work with numeric data in R:\n\nNumeric Examples\n\n\nnum1 &lt;- 5        # integer\nnum2 &lt;- 5.5      # floating-point number\n\n\n\n2.4.2 Character Data Type\nCharacter data type is used to store text. Here’s how you can work with character data in R:\n\nCharacter Examples\n\n\nchar1 &lt;- \"Hello\"       # a word\nchar2 &lt;- \"Hello, world!\"  # a sentence\n\n\n\n2.4.3 Logical Data Type\nLogical data type represents TRUE or FALSE values, which are often the result of comparisons. Here’s how you can work with logical data in R:\n\nLogical Examples\n\n\nlog1 &lt;- TRUE            # TRUE value\nlog2 &lt;- (5 &gt; 3)         # TRUE, because 5 is greater than 3"
  },
  {
    "objectID": "sessions/rmarkdown-basics.html#creat-an-r-markdown-file",
    "href": "sessions/rmarkdown-basics.html#creat-an-r-markdown-file",
    "title": "3  R Markdown Basics",
    "section": "3.1 Creat an R Markdown file",
    "text": "3.1 Creat an R Markdown file\nIn this section, you will learn how to create a new R Markdown file, and save it with a specific name in a designated directory. This is a fundamental skill that will help you keep your work organized as you learn R.\n\nInstructions\n\n\nLaunch RStudio:\n\nNow that the RStudio is open on your computer.\n\nCreate a New Directory:\n\nIn the Files pane (bottom-right by default), navigate to a location on your computer where you’d like to save your work.\nClick on the “New Folder” icon, and name the new folder learning_R.\nPlease try to avoid creating the folder on a remote drive as it will make it much slower to work with. Make folder on your computer in Documents or Drive of choice.\n\nSet Working Directory:\n\nOnce the folder is created, set it as your working directory by clicking on “Session” on top pane, then “Set As Working Directory” -&gt; Choose directory and locate the directory learning_R and press OK.\n\n\nOR by typing in the console without #\n\n# setwd(\"Drive:/path/to_your/directory/learning_R\")\n\n\nCreate a New R Markdown file:\n\nGo to the toolbar at the top of the RStudio window.\nClick on “File”, then “New File”, and select “R Markdown”.\n\nSave the R Markdown file:\n\nNow, save the new R Markdown by clicking on “File” in the toolbar, then “Save” (or by pressing Ctrl + S on your keyboard).\nIn the dialog box that appears, navigate to the learning_R directory that you created.\nName your file workbook and click “Save”.\nIt will be saved with file extension .Rmd\n\nVerify the file is created:\n\nIn the Files pane, navigate to the learning R directory.\nConfirm that your workbook.Rmd file is saved there.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhen working with R, it’s important to develop the habit of using underscores (_) instead of spaces when naming files and folders.\nIn this module, we will work in a R Markdown file. We won’t be creating an R Script at this stage.\nR Markdown is incredibly useful at this point, functioning much like a notebook where you can explore and play around with data.\nGoing forward, ensure you follow the steps and exercises in order, as each step typically builds upon the previous one. Skipping ahead may result in missing crucial information and getting errors."
  },
  {
    "objectID": "sessions/rmarkdown-basics.html#read-and-reflect",
    "href": "sessions/rmarkdown-basics.html#read-and-reflect",
    "title": "3  R Markdown Basics",
    "section": "3.2 Read and Reflect",
    "text": "3.2 Read and Reflect\n\nHow does organizing your files into designated directories help streamline your workflow?\nWhy is it important to give meaningful names to your R Scripts?\nHow is it related to your research directories and file names, do you also write names like results1, results2, results3, results final, results commented PI and results4, results final2.\n\nTake a moment to reflect on these questions. As you continue to learn R, maintaining an organized workspace will become increasingly important.\n\n\n\n\n\n\nNote\n\n\n\nWant to learn more about the naming conventions in R?\nCheck out this for naming: files and directories and this for Objects"
  },
  {
    "objectID": "sessions/rmarkdown-basics.html#using-the-r-markdown-file",
    "href": "sessions/rmarkdown-basics.html#using-the-r-markdown-file",
    "title": "3  R Markdown Basics",
    "section": "3.3 Using the R Markdown file",
    "text": "3.3 Using the R Markdown file\n\nIf R Markdown file workbook.Rmd that you recently created is not already open, you can open it by clicking on its name in the file pane.\n\nWhen the file is open the the RStudio interface look like this.\n\n\n\nRStudio Interface on Start\n\n\n\nAnd the workbook looks like this. Does it in your case?\n\n\n\n\nRMarkdown file startup\n\n\n\nRead the content of the file and then delete the everything below ## R Markdown\nLet’s proceed to complete Exercise 3 inside the workbook.Rmd file."
  },
  {
    "objectID": "sessions/rmarkdown-basics.html#excercise-1",
    "href": "sessions/rmarkdown-basics.html#excercise-1",
    "title": "3  R Markdown Basics",
    "section": "3.4 Excercise 1",
    "text": "3.4 Excercise 1\n\nDiscovering Data Types\nInside the opened workbook place your cursor below the ## R Markdown\nTo insert a code chunk, press Ctrl + Alt + I, or alternatively, you can click on “Code” at the top “on the Toolbar” and then select “Insert Chunk”.\n\nUse the class() function to discover the data type of a variable:\n\n\n\n\n\n\nNote\n\n\n\nIn R, the class() function is used to determine the data type of an object. This function is particularly useful when working with different types of data structures in R, such as vectors, matrices, data frames, and lists. It helps you understand how R is interpreting your data, which is crucial for effective data manipulation and analysis\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nRecall that we created the objects num1, char1, and log1 earlier in Section 2.4. If they are visible in your environment pane, employ the class function to ascertain the type of data they contain. If they are not visible, recreate them by rerunning the code from sections 2.4.1 to 2.4.3.\nWhen executing code in R Markdown, you can either click the green arrow button at the top right corner of the code chunk to run the entire code chunk or position your cursor on the specific line of code you wish to run and press Ctrl + Enter, which will execute only that particular line of code.\n\n\n\n\n\nclass(num1)  # Output: \"numeric\"\n\n[1] \"numeric\"\n\nclass(char1) # Output: \"character\"\n\n[1] \"character\"\n\nclass(log1)  # Output: \"logical\"\n\n[1] \"logical\""
  },
  {
    "objectID": "sessions/rmarkdown-basics.html#excercise-2",
    "href": "sessions/rmarkdown-basics.html#excercise-2",
    "title": "3  R Markdown Basics",
    "section": "3.5 Excercise 2",
    "text": "3.5 Excercise 2\n\nCreate a numeric variable and perform a basic arithmetic operation.\nCreate a character variable containing your name.\nCreate a logical variable by comparing two numbers.\nperform this inside the workbook file\n\n\n\n\n\n\n\nVariable names to avoid\n\n\n\nYou have the flexibility to choose any name for your variables. However, it is recommended to refrain from utilizing names of functions and objects from base R to prevent any potential conflicts or unexpected behavior. Here are some examples to consider:\n\nc\ndf\nmean\nsum\ndata\nmatrix\nvector\nlist\nfactor\nlibrary\n\nThese names are commonly used in R for various purposes, and using them as variable names can lead to confusion or errors in your code. It’s generally a good practice to choose descriptive and unique names for your variables to avoid any issues.\n\n\n\n\n\n\n\n\nExcercise 2: Click to see solution\n\n\n\n\n\n\n\n\n\nnumeric_variable &lt;- 10\narithmetic_result &lt;- numeric_variable + 5  # Adding 5 to the numeric_variable\n\n\n\n\n\nname_variable &lt;- \"Your Name\"\n\n\n\n\n\ncomparison_variable &lt;- (10 &gt; 5)  # Checking if 10 is greater than 5\n\n\nIn this solution:\n\n\nA numeric variable named numeric_variable is created and assigned a value of 10. A basic arithmetic operation (addition) is then performed on this variable.\nA character variable named name_variable is created and assigned the value “Your Name”.\nA logical variable named comparison_variable is created by comparing two numbers using the greater than (&gt;) operator."
  },
  {
    "objectID": "sessions/vectors.html#creating-and-manipulating-vectors",
    "href": "sessions/vectors.html#creating-and-manipulating-vectors",
    "title": "4  Vectors and Factors",
    "section": "4.1 Creating and Manipulating Vectors",
    "text": "4.1 Creating and Manipulating Vectors\nVectors are fundamental data structures in R, which allow you to store multiple values in a single variable. These values should be of the same data type (e.g., all numeric, all character, etc.). Vectors are ordered, meaning that the values have a specific order in the vector.\n\n\n\n\n\n\nImportant\n\n\n\nMoving forward, please work within the workbook file you created earlier. To strengthen your coding skills and develop finger muscles memory, we recommend typing out the code inside the code chunks as you learn and practice R.\n\n\n\n4.1.1 Creating Vectors\nYou can create a vector using the c() function, which stands for concatenate. Here’s how:\n\n# Creating a numeric vector\nnumeric_vector &lt;- c(1, 3, 5, 7, 9)\n\n\n# Creating a character vector\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"cherry\")\n\n\n# Creating a logical vector\nlogical_vector &lt;- c(TRUE, FALSE, TRUE)\n\n\n\n4.1.2 Accessing Vector Elements\nYou can access individual elements of a vector using square brackets [] with the index (position) of the element in the vector that you want.\n\n#Accessing the second element of numeric_vector\nnumeric_vector[2]\n\n[1] 3\n\n# here we asked R what element is at index 2\n# the answer is  3\n\n\n\n4.1.3 Manipulating Vectors\nThere are various ways to manipulate vectors in R. Some of them include:\nAdding Elements: You can add elements to a vector using the c() function.\n\n# Adding an element to numeric_vector\nnumeric_vector &lt;- c(numeric_vector, 11)  # numeric_vector is now c(1, 3, 5, 7, 9, 11)\n\nRemoving Elements: A common way to remove elements is by using [ ] and giving the index of the element in the vector.\n\n# Removing the first element from numeric_vector\nnumeric_vector &lt;- numeric_vector[-1]  # numeric_vector is now c(3, 5, 7, 9, 11)\n\nChanging Elements: You can change the value of a vector element by assigning a new value to it.\n\n# Changing the third element of numeric_vector\nnumeric_vector[3] &lt;- 10  # numeric_vector is now c(2, 3, 10, 5, 6)"
  },
  {
    "objectID": "sessions/vectors.html#excercise-3",
    "href": "sessions/vectors.html#excercise-3",
    "title": "4  Vectors and Factors",
    "section": "4.2 Excercise 3",
    "text": "4.2 Excercise 3\nNow it’s your turn to practice!\n\nCreate a character vector with names of three of your favorite fruits.\nAccess and print the second element of the vector.\nAdd another favorite fruit to your vector.\nRemove the first element from your vector.\nChange the last element of your vector to a different food item.\nOn every step verify the output, is it what you expected?\n\n\n\n\n\n\n\nExcercise 3: Click to see solution\n\n\n\n\n\n\n# 1. Create a character vector with names of three of your favorite fruits.\nfavorite_fruits &lt;- c(\"Apple\", \"Banana\", \"Cherry\")\n\n# 2. Access and print the second element of the vector.\nsecond_fruit &lt;- favorite_fruits[2]\nprint(second_fruit)\n\n[1] \"Banana\"\n\n# 4. Add another favorite fruit to your vector.\nfavorite_fruits &lt;- c(favorite_fruits, \"Date\")\nprint(favorite_fruits)\n\n[1] \"Apple\"  \"Banana\" \"Cherry\" \"Date\"  \n\n# 4. Remove the first element from your vector.\nfavorite_fruits &lt;- favorite_fruits[-1]\nprint(favorite_fruits)\n\n[1] \"Banana\" \"Cherry\" \"Date\"  \n\n# 4. Change the last element of your vector to a different fruit item.\n\nfavorite_fruits[3] &lt;- \"Elderberry\"\nprint(favorite_fruits)\n\n[1] \"Banana\"     \"Cherry\"     \"Elderberry\"\n\n# Now, the favorite_fruits vector should be: c(\"Banana\", \"Cherry\", \"Elderberry\")"
  },
  {
    "objectID": "sessions/vectors.html#factors-and-levels",
    "href": "sessions/vectors.html#factors-and-levels",
    "title": "4  Vectors and Factors",
    "section": "4.3 Factors and levels",
    "text": "4.3 Factors and levels\nWhen working with data in R, we often deal with categorical variables, which are variables that can be divided into different categories, such as “Yes” or “No”, or “Small”, “Medium”, “Large”. In R, we use a special type of variable called a factor to handle these categories. Think of factors as containers that hold and manage these categories, which we call levels.\n\n4.3.1 Understanding Factors\nImagine you’re sorting fruits into baskets. Each basket is labeled with the name of a fruit. In R, each basket is like a level of a factor. The factor is the concept of “fruit types”. If you have three types of fruits—apples, bananas, and cherries—then your factor has three levels: “Apple”, “Banana”, and “Cherry”.\nWhy Use Factors?\n\nOrganization for Analysis: Just as baskets help us organize fruits, factors help organize our data, making it easier to analyze.\nClear Categories: Even if we didn’t collect any cherries, our “fruit type” factor still knows cherries exist as a category, keeping our data consistent.\nOrder Matters: We can order our factors (like saying small, medium, and large sizes), which is important for analysis that depends on ranking.\nVisualization: Factors help R know how to group and label data in charts, which makes our visualizations clear and accurate.\n\nPractical Example: Fruit Count Chart with factor levels\nLet’s relate this to our fruit count chart below. We categorized the count of different fruits. In our chart, each fruit type is a level in our factor. This allows us to make a clear and organized bar chart, showing us how many of each fruit type we have. Remember, factors are there to make our data analysis and visualization tasks easier and more accurate, much like baskets help keep fruits organized in real life!\n\n\n\n\n\n\nNote\n\n\n\nMove your cursor over the bars in the chart to view the precise counts of each fruit type.\n\n\n\n\n\n\n\n\nPractical Example: Fruit Count Chart without factor levles In this example, we didn’t specify to R that our data should be treated as categorical with distinct factor levels. Instead, we’ve labeled all entries simply as “All Fruits,” akin to placing various fruits into one basket. This approach makes it challenging to discern the quantity of each individual fruit type because we’re presented with a combined total rather than a detailed breakdown.\n\n\n\n\n\n\n\n\n4.3.2 Creating and converting Factors\nYou can create a factor from a vector using the factor() function. Here’s how:\n\n# Create a vector of fruit names\nfruit_vector &lt;- c(\"Apple\", \"Banana\", \"Cherry\", \"Apple\", \"Cherry\", \"Banana\", \"Banana\", \"Cherry\", \"Apple\",\"Apple\",\"Apple\")\n\n\nfruit_vector #  you can get the value of a vector just by runnin gits name in console or in the code chunk\n\n [1] \"Apple\"  \"Banana\" \"Cherry\" \"Apple\"  \"Cherry\" \"Banana\" \"Banana\" \"Cherry\"\n [9] \"Apple\"  \"Apple\"  \"Apple\" \n\n\nConvert the vector to a factor\n\n# In this code, convert the fruit_vector vector into a factor using the factor() function.\nfruit_factor &lt;- factor(fruit_vector)\n\n\nfruit_factor  \n\n [1] Apple  Banana Cherry Apple  Cherry Banana Banana Cherry Apple  Apple \n[11] Apple \nLevels: Apple Banana Cherry\n\n\nLevels of a Factor The unique values in a factor are called levels. You can see the levels of a factor using the levels() function. Get the levels of factor\n\nlevels(fruit_factor)  \n\n[1] \"Apple\"  \"Banana\" \"Cherry\"\n\n\nGetting Summary of Factors\n\nsummary(fruit_factor)\n\n Apple Banana Cherry \n     5      3      3 \n\n\nYou can change the number of the elements (fruit names in the fruit_vector) and then play with it.\n\n\n\n\n\n\nNote\n\n\n\nWhy get summary of factors? It is because just like you’d want to know how many of each type of fruit you have in the basket, in statistics, you often need to sort data into categories and count them. Factors help you do that in R.\n\n\n\n\n4.3.3 Ordered Factors\nUnderstanding Ordered Factors in R In R, when we talk about data like T-shirt sizes or class levels, we call them “factors.” They are like labels we put on things that are similar, such as “Small,” “Medium,” “Large” for sizes.\nBut sometimes, it’s not enough to just label these things. We need to remember that some labels come before others, like how “Small” is smaller than “Medium.” We use something called “ordered factors” to do this.\nWhy Ordered Factors Matter\nThink about lining up for a race. The order matters, right? First, second, third. If we mix it up, it would be confusing. It’s the same with our data. If we don’t use ordered factors when the order is important, we might get mixed up results.\nHow to Make Ordered Factors\nHere’s how we make ordered factors in R:\n\nWe tell R which labels we have, like “Small,” “Medium,” “Large.”\nWe tell R to remember the order by saying TRUE to “ordered.”\n\nExample with T-Shirt Sizes\nLet’s say we’re sorting T-shirts by size:\n\nsizes &lt;- c(\"Small\", \"Medium\", \"Large\", \"Medium\", \"Small\")\n\nTo keep the sizes in order, we make an ordered factor:\n\nordered_sizes &lt;- factor(sizes, ordered = TRUE, levels = c(\"Small\", \"Medium\", \"Large\"))\n\nNow R knows that “Small” comes before “Medium,” and “Medium” comes before “Large.”\nUsing Ordered Factors\nWhen we have our sizes in order, we can do things like see if one size is bigger than another, or make graphs where “Small” comes before “Medium,” not just wherever they popped up in our list. So, ordered factors help us keep our data tidy and in line, like students in a school line-up. It helps us make sense of things that should follow a certain order, giving us clearer results when we’re working with our information. This is super helpful for making sure we understand our data the right way.\n\n\n4.3.4 Converting Factors\nLet’s use a fruit basket again as an example to illustrate this concept:\nSuppose you have a basket filled with an assortment of fruits: apples, bananas, and cherries. You decide to organize them by putting a little sticker on each that says “apple”, “banana”, or “cherry”. In R, this is like creating a factor for your fruits.\nHere’s some R code that might represent our fruit basket as a factor:\n\nfruits &lt;- c(\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")\nfruit_factor &lt;- factor(fruits)\n\nNow, let’s explore the conversions and understand why and when you might need them:\n\nTo Character:\nSometimes, you want to check the stickers without sorting the fruits. This is like converting your factor to a character vector. You’re not interested in how many apples or cherries you have, just what’s in the basket.\n\n\nfruit_labels &lt;- as.character(fruit_factor)\n\nWhy and when you need this: You might need to do this when you’re only interested in the names of the fruits for a task like labeling a shelf, where the count doesn’t matter.\n\nTo Numeric:\n\nOn other occasions, you might decide to assign a number to each type of fruit: apples = 1, bananas = 2, cherries = 4. This is like converting your factor to a numeric vector. Instead of names, each fruit is represented by a number.\n\nfruit_numbers &lt;- as.numeric(fruit_factor)\n\nWhy and when you need this: This is useful when you’re entering your fruit data into a system that requires numbers instead of names, maybe for a stocktaking system that tracks inventory with codes instead of fruit names.\nIn summary, whether you convert a factor into characters or numbers depends on what you need at the moment:\n\nUse characters when you want to work with the names or labels directly.\nUse numbers when you need to enter data into a numerical system or do some sort of calculation where categories are represented by numbers.\n\n\n\n4.3.5 Excercise 4\nNow, practice what you’ve learned!\n\nCreate a factor variable with your favorite colors.\nFind out the levels of your factor variable.\nCreate an ordered factor with levels “Low”, “Medium”, “High”.\nGet a summary of your ordered factor.\nConvert the factor back to a character vector.\n\n\n\n\n\n\n\nExcercise 4: Click to see solution\n\n\n\n\n\n\n# 1. Create a factor variable with your favorite colors.\nfavorite_colors &lt;- c(\"Red\", \"Blue\", \"Green\", \"Blue\", \"Red\")\ncolor_factor &lt;- factor(favorite_colors)\n\n# 2. Find out the levels of your factor variable.\ncolor_levels &lt;- levels(color_factor)\ncolor_levels  # Output: \"Blue\" \"Green\" \"Red\"\n\n[1] \"Blue\"  \"Green\" \"Red\"  \n\n# 5. Create an ordered factor with levels \"Low\", \"Medium\", \"High\".\nordered_vector &lt;- c(\"Low\", \"Medium\", \"High\", \"Medium\", \"Low\")\nordered_factor &lt;- factor(ordered_vector, ordered = TRUE, levels = c(\"Low\", \"Medium\", \"High\"))\n\n# 5. Get a summary of your ordered factor.\nordered_summary &lt;- summary(ordered_factor)\nordered_summary  # Output: a table showing the counts of each level\n\n   Low Medium   High \n     2      2      1 \n\n# 5. Convert the factor back to a character vector.\nchar_vector &lt;- as.character(ordered_factor)\nchar_vector  # Output: \"Low\" \"Medium\" \"High\" \"Medium\" \"Low\"\n\n[1] \"Low\"    \"Medium\" \"High\"   \"Medium\" \"Low\""
  },
  {
    "objectID": "sessions/df-lists.html#introduction-to-data-frames",
    "href": "sessions/df-lists.html#introduction-to-data-frames",
    "title": "5  Data Frames and Lists",
    "section": "5.1 Introduction to Data Frames",
    "text": "5.1 Introduction to Data Frames\nData frames are one of the most important data structures in R, especially for data analysis and statistical modeling. They are used to store tabular data, which is data that’s organized in rows and columns, much like a spreadsheet or a database table. Each column in a data frame represents a unique variable, and each rowrepresents an unique observation.\n\n5.1.1 Why Do We Need Data Frames?\n\nOrganized Storage: Data frames allow for the organized storage of data where you can have different types of variables (e.g., numeric, character, logical) all in one place.\nEasy Manipulation: They provide a structured way to manipulate data, making it easier to perform operations on groups of data.\nCompatibility: Many R functions and packages are designed to work with data frames, making them a standard for working with data in R.\n\n\n\n5.1.2 How Does R Handle Data Frames?\n\nColumn-Based Structure: R stores data frames in a column-based structure, which makes it efficient to access and manipulate entire columns of data.\nDifferent Data Types: Unlike matrices, data frames can have columns of different data types.\nNamed Columns and Rows: The columns and rows in a data frame can have names, which is useful for data indexing and retrieval."
  },
  {
    "objectID": "sessions/df-lists.html#example-of-a-dataframe",
    "href": "sessions/df-lists.html#example-of-a-dataframe",
    "title": "5  Data Frames and Lists",
    "section": "5.2 Example of a dataframe",
    "text": "5.2 Example of a dataframe\n\n\n          Name    Color Price_Per_Pound   origin\n1        Apple      Red             1.2      USA\n2       Banana   Yellow             0.5 S Africa\n3       Cherry      Red             2.5    Japan\n4 Dragon fruit Pink-red             2.0    India\n5        Mango   Yellow             3.0 Pakistan\n\n\nA dataframe of [5 rows × 4 columns]"
  },
  {
    "objectID": "sessions/df-lists.html#working-with-data-frames",
    "href": "sessions/df-lists.html#working-with-data-frames",
    "title": "5  Data Frames and Lists",
    "section": "5.3 Working with Data Frames",
    "text": "5.3 Working with Data Frames\nWorking with data frames in R is straightforward. You can:\n\nCreate a data frame using the data.frame() function.\nAccess columns using the $ operator or by indexing with [].\nModify data frames by adding or removing columns or rows.\nSubset data frames based on conditions.\n\nCreate\n\nstudents &lt;- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(24, 27, 22),\n  Major = c(\"Biology\", \"Math\", \"Physics\"),\n  GPA = c(3.8, 3.2, 3.9)\n)\n\nstudents\n\n     Name Age   Major GPA\n1   Alice  24 Biology 3.8\n2     Bob  27    Math 3.2\n3 Charlie  22 Physics 3.9\n\n\nAccess\n\nstudents$Name # access the Names of the students\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\"\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen you press the dollar sign ($) while coding in R, a helpful autocomplete feature pops up. This tool suggests column names for you to choose from, which can be particularly useful when dealing with columns that have long names, reducing the risk of typos that could cause errors. To take advantage of this, simply scroll through the suggestions, select the desired column name, and then press Ctrl + Enter to execute the code. It’s a convenient shortcut that can save time and avoid mistakes.\n\n\nCan you access the information from all other columns one by one ??\nModify The dollar sign ($) in R is used to access a column within a data frame. If you refer to a column name that doesn’t exist, R will create a new column with that name and assign values to it, as demonstrated below.\n\n# Adding a new column\n\nstudents$Graduation_Year &lt;- c(2022, 2023, 2022)\nstudents\n\n     Name Age   Major GPA Graduation_Year\n1   Alice  24 Biology 3.8            2022\n2     Bob  27    Math 3.2            2023\n3 Charlie  22 Physics 3.9            2022\n\n\n\n# Removing a column, setting it to NULL will remove the column\nstudents$Age &lt;- NULL\nstudents\n\n     Name   Major GPA Graduation_Year\n1   Alice Biology 3.8            2022\n2     Bob    Math 3.2            2023\n3 Charlie Physics 3.9            2022\n\n\nSubset\nThe == Operator The equality operator == checks if the value on its left is equal to the value on its right and returns a logical/boolean value (TRUE if the values are equal, FALSE otherwise). It’s important to note that == is for comparison, while = is often used for assignment (though in R, &lt;- is the conventional assignment operator).\n\n# Filtering rows based on condition\nbiology_students &lt;- subset(students, Major == \"Biology\")\nbiology_students\n\n   Name   Major GPA Graduation_Year\n1 Alice Biology 3.8            2022"
  },
  {
    "objectID": "sessions/df-lists.html#excercise-5",
    "href": "sessions/df-lists.html#excercise-5",
    "title": "5  Data Frames and Lists",
    "section": "5.4 Excercise 5",
    "text": "5.4 Excercise 5\nCountries Analysis\nObjective: Gain hands-on experience with creating, modifying, and querying data frames in R.\nBackground: Data frames are one of the most commonly used data structures in R. They are used to store tabular data and are similar to matrices but can contain different types of data.\nTasks:\n\nCreate a Data Frame:\n\n\nCreate a data frame named countries_df with the following columns: Country, Continent, Population, and UN_Member with following information.\nCountries= Brazil, Sweden, India, Canada, Nigeria\nContinent = South America, Europe, Asia, North America, Africa\nPopulation_in_M = 212.6, 10.3, 1380, 37.7, 206\nUN_Member = TRUE, TRUE, TRUE, TRUE, TRUE\n\n\nAdd New Information:\n\nAdd a new column to countries_df named GDP_Per_Capita (in USD).\nPopulate this column with fictional or real GDP per capita figures for each country.\n\nData Cleanup:\n\nSuppose you no longer need the UN_Member column. Remove this column from countries_df.\n\nAnalysis & Filtering:\n\nCreate a new data frame named high_gdp_df that only includes countries with a GDP per capita greater than $20,000.\n\nSorting:\n\nSort high_gdp_df in descending order based on the GDP_Per_Capita column.\n\n\nQuestions for Further Analysis:\n\nWhich continent is represented most among the countries with a high GDP per capita?\nIs there a correlation between the population of a country and its GDP per capita in your dataset? Hypothesize why this might be the case.\n\n\n\n\n\n\n\nExcercise 5: Click to see solution\n\n\n\n\n\n\ncountries_df &lt;- data.frame(\n  Country = c('Brazil', 'Sweden', 'India', 'Canada', 'Nigeria'),\n  Continent = c('South America', 'Europe', 'Asia', 'North America', 'Africa'),\n  Population = c(212.6, 10.3, 1380, 37.7, 206),\n  UN_Member = c(TRUE, TRUE, TRUE, TRUE, TRUE)\n)\n\n\n# Here, I am using example GDP per capita figures\ncountries_df$GDP_Per_Capita &lt;- c(57395, 8920, 46212, 59819, 3036)\n\n\ncountries_df &lt;- subset(countries_df, select = -UN_Member)\n\n\nhigh_gdp_df &lt;- subset(countries_df, GDP_Per_Capita &gt; 20000)\n\n\nhigh_gdp_df &lt;- high_gdp_df[order(-high_gdp_df$GDP_Per_Capita),]"
  },
  {
    "objectID": "sessions/df-lists.html#working-with-lists",
    "href": "sessions/df-lists.html#working-with-lists",
    "title": "5  Data Frames and Lists",
    "section": "5.5 Working with Lists",
    "text": "5.5 Working with Lists\nLists in R are a powerful data structure that allows you to create a collection of elements under a single variable. These elements can be of any type, including numbers, strings, vectors, and even other lists. This flexibility makes lists particularly useful for organizing and managing complex data sets.\nBefore we start creating lists lets first understand what are lists.\nImagine you have a backpack where you can put all sorts of things: a water bottle, some books, a sandwich, and even another smaller bag with your gym clothes. In R, a list is like that backpack. You can put different things in it, like numbers, words, or even other backpacks (lists). And just like you can take things out of your backpack one at a time, you can do the same with a list in R.\n\n5.5.1 Why Do We Need Lists?\n*Mix and Match:** You can have different types of things in a list. So if you’re collecting different kinds of information, you can keep them all in one place.\n*Keep Things Organized:** Sometimes, you have stuff that belongs together, like a pair of socks. Lists let you keep things that belong together, close together.\n*They’re Flexible:** You might have just a few things to carry one day, and a lot the next day. Lists can grow with you and can hold just a few things or lots of things, and it’s easy to add or take away.\n*They Remember:** In a list, each spot has a name, like a pocket in your backpack. You can find what you need by remembering the pocket’s name, so you don’t have to dig through everything.\nIn simple terms: Let’s say you’re going on a treasure hunt, and you have a map, a compass, some snacks, and a camera to take pictures of the treasure. You put all these in your backpack. In R, you would put all these into a list, and when you want to use your camera, you just say “Hey list, give me the camera!” and you’re ready to snap photos.\n\n\n5.5.2 Creating Lists\nTo create a list, you can use the list() function. Here’s an example:\nNotice that in the list we can add differnet types of data for example in the above example we added chracters, numeric and logical data\n\nmy_list &lt;- list(name = \"Statistics\", sections = 1:10, medium = \"online\", data = TRUE)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the list is versatile, allowing the inclusion of various data types; for instance, in the above example, characters, numbers, and logical or Boolean values have been incorporated.\n\n\n\n\n5.5.3 Accessing List Elements\n\nYou can access the elements of a list using double square brackets [[ ]] for a single element or the $ operator to access elements by name.\n\n\nmy_list[[1]]\n\n[1] \"Statistics\"\n\nmy_list[[2]]\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nmy_list[[3]]\n\n[1] \"online\"\n\n\n\nAccess elements by name\n\n\nmy_list$name\n\n[1] \"Statistics\"\n\nmy_list$sections\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nmy_list$data\n\n[1] TRUE\n\n\n\n\n5.5.4 Modifying Lists\nLists can be modified after creation. You can change elements, add new ones, or remove existing ones.\nChange the first element\n\nmy_list[[1]] &lt;- \"Learning R for begginers\"\n\nAdd a new element\n\nmy_list$new_element &lt;- \" Basic Statistics\"\n\nRemove an element\n\nmy_list$data &lt;- NULL\n\n\n\n5.5.5 Nested Lists\nLists can contain other lists. This allows for the creation of complex structures known as nested lists.\nCreate a nested list\n\nmy_nested_list &lt;- list(\n  course = my_list,\n  participants = list(names = c(\"Asieh\", \"Alice\", \"Bob\", \"Bil\", \"Fie\", \"Ria\", \"Mia\"), count = 4)\n)\n\n\nmy_nested_list\n\n$course\n$course$name\n[1] \"Learning R for begginers\"\n\n$course$sections\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$course$medium\n[1] \"online\"\n\n$course$new_element\n[1] \" Basic Statistics\"\n\n\n$participants\n$participants$names\n[1] \"Asieh\" \"Alice\" \"Bob\"   \"Bil\"   \"Fie\"   \"Ria\"   \"Mia\"  \n\n$participants$count\n[1] 4\n\n\nLists are an incredibly versatile and important data structure in R. They can store collections of objects of various types and sizes, making them indispensable for handling complex data sets."
  },
  {
    "objectID": "sessions/df-lists.html#exercise-6",
    "href": "sessions/df-lists.html#exercise-6",
    "title": "5  Data Frames and Lists",
    "section": "5.6 Exercise 6",
    "text": "5.6 Exercise 6\n\nCreate a list containing a numeric vector, a character vector, and a logical.\nAccess and modify the second element of the list.\nAdd a new boolean element to the list.\nCreate a nested list\nAccess one of the inner list’s elements\n\n\n\n\n\n\n\nExcercise 6: Click to see solution\n\n\n\n\n\nStep 1: Create a List\n\n# Create a list with a numeric vector, a character vector, and a logical vector\nmy_list &lt;- list(\n  numeric_vector = c(1, 2, 3, 4, 5),\n  character_vector = c(\"apple\", \"banana\", \"cherry\"),\n  logical_vector = c(TRUE, FALSE, TRUE)\n)\n\nStep 2: Access and Modify the Second Element of the List\n\n# Modify the second element of the list\nmy_list$character_vector &lt;- c(\"grape\", \"watermelon\", \"kiwi\")\n\nStep 3: Add a New Boolean Element to the List To add a new boolean element (TRUE or FALSE), you can simply assign it to a new element in the list:\n\n# Add a new boolean element to the list\nmy_list$new_boolean &lt;- TRUE\n\nStep 4: Create a Nested List and Access an Element A nested list is a list within a list. Here’s how you can create one and then access an element from the inner list:\n\n# Create a nested list\nmy_list$nested_list &lt;- list(\n  inner_numeric = c(10, 20, 30),\n  inner_character = c(\"red\", \"green\", \"blue\")\n)\n\nStep 5: Access inner elements\n\n# Access the first element of the inner numeric vector of the nested list\ninner_element &lt;- my_list$nested_list$inner_numeric[1]\n\nPrint it to see the changes\n\n# Print the entire list to see the changes\nprint(my_list)\n\n$numeric_vector\n[1] 1 2 3 4 5\n\n$character_vector\n[1] \"grape\"      \"watermelon\" \"kiwi\"      \n\n$logical_vector\n[1]  TRUE FALSE  TRUE\n\n$new_boolean\n[1] TRUE\n\n$nested_list\n$nested_list$inner_numeric\n[1] 10 20 30\n\n$nested_list$inner_character\n[1] \"red\"   \"green\" \"blue\" \n\n# Print the accessed inner element\nprint(inner_element)\n\n[1] 10"
  },
  {
    "objectID": "sessions/packages-libraries.html#understanding-r-packages-and-libraries",
    "href": "sessions/packages-libraries.html#understanding-r-packages-and-libraries",
    "title": "6  R Packages and Libraries",
    "section": "6.1 Understanding R Packages and Libraries",
    "text": "6.1 Understanding R Packages and Libraries\nWhen working with R, you’ll often hear about “packages” and “libraries.” It’s important to understand what these are and how they are used in the R programming environment.\n\n6.1.1 What Are R Packages?\nThink of a package as a toolbox that contains a set of tools (functions), materials (data sets), and an instruction manual (documentation). Just as you might have different toolboxes for different types of work (like electrical work or carpentry), in R, you have different packages for different types of tasks, like creating graphs, analyzing statistical data, or manipulating text.\nPackages in R are created by the community: people like you and me who need a set of functions and decide to bundle them together for everyone to use. Once a package is created, it can be shared with others.\n\n\n6.1.2 What Are R Libraries?\nNow, if packages are like toolboxes, then libraries are like the shelves where you store these toolboxes. In R, a library is a directory on your computer where packages are stored. When you install a package, it’s like putting a toolbox on one of these shelves. And when you want to use a package, you have to take it off the shelf and open it, which in R, you do by “loading” the package.\n\n\n6.1.3 Where Are Libraries Stored?\nOn your computer, the R libraries are stored in a place that R knows and can access when you ask it to. This is usually a folder named “R” in your system’s library folder or in a location that you specify. You don’t usually have to worry about where this is unless you’re managing multiple versions of R or you have special security settings on your computer.\n\n\n\n\n\n\nTip\n\n\n\nIf you want to check where the libraries are installed on computer run this command in your console .libPaths()"
  },
  {
    "objectID": "sessions/packages-libraries.html#installing-loading-and-managing-r-packages",
    "href": "sessions/packages-libraries.html#installing-loading-and-managing-r-packages",
    "title": "6  R Packages and Libraries",
    "section": "6.2 Installing, Loading, and Managing R Packages",
    "text": "6.2 Installing, Loading, and Managing R Packages\n\n6.2.1 What Are the Sources of R Packages?\nPackages can come from several places:\n\nCRAN (Comprehensive R Archive Network): This is the main repository where R packages are stored. Think of it as the official app store for R. When you use install.packages(), you’re usually downloading from CRAN.\nBioconductor: This is a repository that’s focused on bioinformatics packages.\nGitHub: Some developers choose to put their packages on GitHub, a platform for developers to share code. These aren’t always officially released on CRAN, but you can still install them using tools like devtools. This requires first install devtools from CRAN website, load its libraries before using it install packages from Github\nLocal Files: Sometimes, you might have a package file (with a .tar.gz extension for Mac/Linux or .zip for Windows) on your computer that you can install directly.\n\nSummary\n\nA package is a collection of functions, data, and documentation that extends R’s capabilities.\nA library is a place on your computer where R packages are stored.\nYou can get packages from places like CRAN, Bioconductor, GitHub, or even local files on your computer.\nOnce you get the hold of installing and loading packages, you’ll have access to a vast world of tools that can help you do almost anything you can imagine with R.\n\n\n\n6.2.2 Section: Installing and Loading R Packages\nIn this section, we’ll cover the essential skills of installing and loading packages in R, a crucial step in leveraging the vast array of tools available for data analysis in R. R packages are collections of functions, data, and compiled code that extend the basic functionality of R.\nBy the end of this section, students will be able to: 1. Install R packages from CRAN and other repositories. 2. Load packages into an R session. 3. Troubleshoot common issues related to package installation.\n\n\n6.2.3 Installing R Packages from CRAN\nAccessing CRAN - CRAN (Comprehensive R Archive Network) is the main repository for R packages. - To install a package from CRAN, use the install.packages() function in R.\nExample Command - For example, to install the package ggplot2, you would use the command: install.packages(\"ggplot2\").\nInternet Connection - Ensure you have an active internet connection, as R will need to download the package files.\nDependencies - When installing a package, R automatically installs any other packages (dependencies) that are required.\n\n\n\n\n\n\nNote\n\n\n\nIf you use the command install.packages(\"ggdag package\"), to install a package of your choice ggdag as an example, and you get the following error message.\nWarning in install.packages : package ‘ggdag package’ is not available for this version of R\nA version of this package for your version of R might be available elsewhere, see the ideas at https://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\nYou will get this error message because the package is not available on CRAN repositiory. Search it on web and see where this package is available and then try the below two methods You can try installing it from GitHub using the devtools package or from Bioconductor.\n\n\n\n\n6.2.4 Installing Packages from GitHub\n*Using DevTools - The devtools package in R is designed to facilitate package development and installation from sources like GitHub. - First, install devtools from CRAN using install.packages(\"devtools\"). - Then load the package using library(devtools).\nInstall from GitHub - With devtools installed, and loaded you can use the install_github() function to install packages directly from GitHub. - The syntax is devtools::install_github(\"username/repository\"), where username is the GitHub username and repository is the name of the repository.\nExample Command - For instance, if you want to install a package named leaflet from a GitHub user rstudio``, use:devtools::install_github(“rstudio/leaflet”)`.\nNote on Private Repositories - For private repositories, you may need to configure additional authentication settings.\n\n\n6.2.5 Installing Packages from Bioconductor\nBioconductor for Bioinformatics - Bioconductor is a project providing tools for the analysis and comprehension of high-throughput genomic data in R. - It has its own set of packages, particularly focused on bioinformatics.\nInstall Bioconductor Packages - To install packages from Bioconductor, first install the BiocManager package from CRAN using install.packages(\"BiocManager\"). - Then, use BiocManager::install() to install packages from Bioconductor.\nExample Command - For example, to install the GenomicFeatures package from Bioconductor, use: BiocManager::install(\"GenomicFeatures\").\nBioconductor Versioning - Bioconductor releases are semi-annual and tied to specific versions of R. Ensure that your version of R is compatible with the version of Bioconductor you are using.\n\n\n6.2.6 Loading Packages into R Session\nUsing library() - Once a package is installed, load it into your R session using the library() function. - For example, to load ggplot2, use: library(ggplot2).\nChecking Installed Packages - Use installed.packages() to get a list of all packages installed in your R environment.\n\n\n6.2.7 Troubleshooting Package Installation\nError Messages - Pay close attention to any error messages during installation; they often provide clues about the issue.\nDependency Issues - If there are missing dependencies, try installing those packages separately.\nCompatibility with R Version - Some packages may not be compatible with your current version of R. Check the package documentation for version requirements.\nInternet Connection and Firewalls - Ensure a stable internet connection. Firewalls or network policies may sometimes block R from accessing external servers.\n\n\n\n\n\n\nTip\n\n\n\nAdditional Resources - Type the following commands into your R console and hit enter. This will open an R documentation window in the Files pane, specifically in the Help Tab. This window provides detailed information about these commands. At this stage, it’s not necessary to delve deeply into understanding every aspect of these commands. However, this method is a valuable tool for learning more about packages and functions in R as you progress. - For R documentation, use: ?install.packages and ?library"
  },
  {
    "objectID": "sessions/packages-libraries.html#exercise-7",
    "href": "sessions/packages-libraries.html#exercise-7",
    "title": "6  R Packages and Libraries",
    "section": "6.3 Exercise 7",
    "text": "6.3 Exercise 7\nThis exercise is designed to familiarize you with the process of installing and loading R packages, and exploring their functions. You’ll get hands-on experience with some of the basic data analysis packages in R.\n\nInstall Package:\n\nInstall the following popular R packages for data analysis:\n\nggplot2 for data visualization.\nreadr for reading rectangular data.\n\nInstall your chosen package using the command install.packages(\"packageName\"), replacing \"packageName\" with the name of the package.\nWe will use these two packages in next two sections\n\nLoad the Package:\n\nLoad the package into your R session using library(packageName).\n\nExplore Package Functions:\n\n\nUsing RStudio’s Help Tab:\n\nIn RStudio, locate the Help tab, which is typically found in the lower right panel in the File pane. Type the name of the package or a specific function from the package in the search bar. Press enter, and a new page will open, displaying detailed information about the package or function.\n\n\n\n\n\n\nExcercise 7: Click to see solution\n\n\n\n\n\n\nInstall\n\nInstall one by one\ninstall.packages(\"ggplot2\")\ninstall.packages(\"readr\")\nOR install in one go\ninstall.packages(\"ggplot2\", \"readr\")\nWhen you run the above codes you will see the following text (or something similar) in your console It may take sometime if it is also installing the dependencies (other packages required for ggplot2)\ntrying URL 'https://cran.rstudio.com/bin/windows/contrib/3.6/ggplot2_3.2.1.zip Content type 'application/zip' length 3976166 bytes (3.8 MB) downloaded 3.8 MB\npackage ‘ggplot2’ successfully unpacked and MD5 sums checked\nThe downloaded binary packages are in C:\\Users\\...\\your\\directory\nIf you see this message it means that the package is installed successfully. Do not be afraid of the text in red color that mostly symbolize the Error or Warning message.\n\nLoad the packages\n\nUse the library() function to load the packages ggplot2 and readr as shown below\nlibrary(ggplot2)\nlibrary(readr)\nWhen you run these commands, they should execute without any errors or warning messages, and typically, you won’t see any output in the console. If the packages are loaded successfully, R proceeds silently, indicating that everything is functioning correctly.\n\nExplore\n\nUsing RStudio’s Help Tab\n\nLocating the Help Tab:\n\nIn RStudio, find the Help tab in the lower right panel, typically under the File pane.\n\nSearching for Package or Function Documentation:\n\nIn the search bar, type ggplot2 and press enter. A new documentation page opens, showing detailed information about the ggplot2 package. It has its own webpage and GitHub page please click on link https://ggplot2.tidyverse.org to explore more about ggplot usage.\nIn the search bar, type ggplot, which is a function in the ggplot2, package and press enter. A new documentation page opens with Description, Usage, Arguments, Details and Exxamples on information page.\nIn the search bar, type readr and press enter. You will see again a page open up with links to web pages. You can click on https://readr.tidyverse.org to get more information on the readr package.\nIn the search bar, type read_csv and press enter. You will see again a page open up with information all read function available in the readr package.\n\n\nNavigate down and find the read_csv function and read the arguments it can take.\n\nHere read_csv() is function that performs a specific task. Everything inside the read_csv() within the small closed brackets, separated by comma is an argument. For example col_names is an argument and it can take logical values either TRUE or FALSE. If you do not specify the argument, it will take the default value. For example, if you do not specify the argument col_names it will take the default value FALSE and will not read the first row of the data as column names.\nSummary\n\nThrough the Help tab, you can access a wealth of information about R packages and their functions.\nThis process helps in understanding how specific functions work, including their required inputs (arguments) and what they return.\nBy exploring these resources, you gain insights into how to effectively use these packages in your R programming tasks."
  },
  {
    "objectID": "sessions/basic-import.html#introduction",
    "href": "sessions/basic-import.html#introduction",
    "title": "7  Basic Data Import",
    "section": "7.1 Introduction",
    "text": "7.1 Introduction\nIn this section, we explore importing data into R, focusing on the readr package. readr is part of the tidyverse, providing an efficient way to read tabular data like CSV and TSV files. There are many packages designed for specific type of data import. For example, readxl package is designed to read excel files, haven package is designed to read SAS, SPSS and Stata files. We will explore only readr package in the next section.\nWe will focus on the following topics:\n\nUnderstanding the basics of the readr package.\nImport data into R using readr functions.\nExplore the structure of imported data.\n\n\n\n\n\n\n\nImportant\n\n\n\nPlease install and load the readr package before proceeding. If you have not done so already please follow the instructions in the previous section Exercise 9.\n\n\n\n7.1.1 Key Features of readr package\nreadr is part of the tidyverse suite in R and is designed to efficiently read and write tabular data. It is known for its simplicity and speed compared to base R functions. The key features of readr package are:\n\nFast and user-friendly reading of CSV, TSV, and other delimited files.\nProduces tibble output, which is a modern approach to data frames in R.\nHandles text and file connections, and can even read from compressed files directly.\n\n\n\n7.1.2 Importing data with readr\nMethods of importing data\nThere are two primary methods for importing data into R:\n1 - From local file on a computer 2 - From the Web directly\nI have generated simulated data similar to iris data set and saved it in the data folder on my computer. You can use the iris data available in R, OR read in any data in CSV or TSV file format.\n\n\n\n\n\n\nTip\n\n\n\niris data set is a famous real world data set that is available in R. It is a data set that contains information about iris. It contains 150 observations and 5 variables. The variables are sepal length, sepal width, petal length, petal width, and species. The species variable has three levels: setosa, versicolor, and virginica. The data set is available in R and can be loaded using the data() function. The data set is also available in CSV format on the internet.\n\n\nWe will use the simulated data set to demonstrate how to import data into R from a local file.\n1- Importing data from local file\nImportant things to know before importing data from a local file\n\nImport data from a local file\nread_csv() function is used to read a csv file\nread_csv() function takes the file path as an argument\nThe file path is the location of the file on your computer\nThe file path is a string, so it must be enclosed in quotes “”\nThe file path can be absolute or relative\nAbsolute file paths start with the root directory for example “(C:/projects/dir1/dir2/learnR/data/)”, C is root directory here\nRelative file paths start with the current working directory “data/”\nThe working directory is the default location where R looks for files\nYou can check the current working directory using the getwd() function\nYou can change the working directory using the setwd() function\n\nIn this example, we’ll use the variable name iris. Remember, you’ll need to provide the file path on your computer. By doing this, the data will be loaded into R and assigned to the variable iris. You also get a brief summary of the data set.\n\n# Import data from local file\niris &lt;- readr::read_csv(\"../data/iris.csv\")\n\nRows: 150 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): species\ndbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\n\nWant to know what the description means?\n\n\n\n\n\n\nThe first line of the output tells you that the data set has 150 rows and 5 columns.\nThe second line tells you the data is comma separated.\nThe third line tells you to one column names “species” contains data of type character.\nThe fourth line tells you that the other four columns contain data of type double.\nNext two are to get full specification of data or suppress this message.\n\n\n\n\nWhile you will be working with your projects in R you will face different scenarios where you will need to import data from a local file.\n\n\n7.1.3 Different Scenarios for Importing Data\nBelowa are few examples of different scenarios for importing data from a local file.\n\nScript and Data File in the Same Directory If script.R and data_file.csv are in the same directory:\n\nproject/\n├── data_file.csv\n└── script.R\nImport using:\ndata &lt;- read_csv(\"./data_file.csv\")\n\nData File in a Subdirectory If data_file.csv is in a subdirectory:\n\nproject/\n├── data/\n│   └── data_file.csv\n└── script.R\nImport using:\ndata &lt;- read_csv(\"./data/data_file.csv\")\n\nScript in a Subdirectory If script.R is in a subdirectory, and data_file.csv is in the parent directory:\n\nproject/\n├── data_file.csv\n└── session/\n    └── script.R\nImport using:\ndata &lt;- read_csv(\"../data_file.csv\")\n\nBoth in Different Subdirectories If both are in different subdirectories of the same parent directory:\n\nproject/\n├── data/\n│   └── data_file.csv\n└── session/\n    └── script.R\nImport using:\ndata &lt;- read_csv(\"../../data/data_file.csv\")\n\nNested Subdirectories If your script is in a nested subdirectory:\n\nproject/\n├── data/\n│   └── data_file.csv\n└── session/\n    └── subfolder/\n        └── script.R\nImport using:\ndata &lt;- read_csv(\"../../../data/data_file.csv\")\nHave look at the iris data with function head()\nWe can use the iris data for further exploration load the iris data set using the data() function\n\ndata(iris)\n\nYou will see the iris data set in the environment pane. You can also use the head() function to view the first few rows of the data set.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n2- Importing data from web\nIn this section, we will learn how to import data from the web. We will use the read_csv() function to import data from the web. The read_csv() function takes the URL of the data as an argument. The URL is the location of the data on the web. The URL is a string, so it must be enclosed in quotes ““.\n\n# URL of the dataset\nurl &lt;- \"https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins.csv\"\n\n# Read the data into R\npenguins_data &lt;- read_csv(url)\n\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nIn this example we first stored the web address into a variable url. Then we used the read_csv() function to read the data from url into R. We assigned the data to the variable penguins_data. We can now use the variable penguins_data to access the data.\n\nhead(penguins_data)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n7.1.4 Exploring the structure of imported data\nUnderstanding your dataset’s structure is vital in data analysis. R offers essential functions to examine and comprehend this structure. This guide will introduce these tools, crucial for familiarizing yourself with your data before proceeding with analysis or visualization. R’s functions enable effective data summarization and structural inspection.\nBasic Functions for Data Exploration\nViewing Data\nhead() and tail(): These functions show the first and last parts of your data, respectively.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\ntail(iris)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\nSummarizing Data\nsummary(): This function gives a quick summary of the data in each column, such as mean, median, min, max for numeric data, and frequency for categorical data.\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\n\n\n\n\n\n\nWant to know what the summary output means?\n\n\n\n\n\nThese are the numerical columns of the dataset.\nSepal.Length, Sepal.Width, Petal.Length, Petal.Width:\nFor each of these columns, the summary output shows:\nMin.: The smallest value in the column. 1st Qu.: The first quartile (25th percentile), meaning 25% of the values in the column are below this number. Median: The middle value of the column when the values are sorted in ascending order. It divides the data into two halves. Mean: The average of all the values in the column. 3rd Qu.: The third quartile (75th percentile), indicating 75% of the values are below this number. Max.: The largest value in the column. For example, for Sepal.Length, the smallest value is 4.3, the median is 6.0, and the largest value is 7.9.\nspecies: This is a categorical column, as indicated by the data types Class :character and Mode :character. The summary for this kind of column is different:\nLength: The total number of entries in the column. In this case, there are 150 species entries. Class and Mode: These indicate the data type of the column, which is character in this case, suggesting that the species names are text data.\n\n\n\nUnderstanding Data Structure\nstr(): This function displays the structure of your data, including the type of each column, the first few entries in each column, and the total number of observations.\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\ndim(): Use this to find out the dimensions of your data (number of rows and columns).\n\ndim(iris)\n\n[1] 150   5\n\n\nnames(): This returns the names of the columns in your data.\n\nnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n\nclass(): This function tells you the class of the data object (e.g., data.frame, matrix).\n\nclass(iris)\n\n[1] \"data.frame\"\n\n\nPractice Exercise Load a dataset into R (this can be any dataset of your choice, such as the built-in mtcars or iris datasets) and use the functions mentioned above to explore its structure. Write down your observations about the dataset’s size, structure, and types of data it contains."
  },
  {
    "objectID": "sessions/basic-import.html#excercise-8",
    "href": "sessions/basic-import.html#excercise-8",
    "title": "7  Basic Data Import",
    "section": "7.2 Excercise 8",
    "text": "7.2 Excercise 8\nMore than the above described two methods you can also use the data from R. R has some built-in datasets. You can use these datasets to practice your data analysis skills. The mtcars dataset is a classic dataset available in R, containing data extracted from the 1974 Motor Trend US magazine. It comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles.\nTasks\n1- Load the Data\n- Use the data() function to load the mtcars dataset into your R environment.\n2- View the Data\n3- Summarize the Data\n4- Explore the Data Structure\n5- Determine the Data Dimensions\n6- Retrieve the Column Names\n7- Identify the Data Type\nQuestions for Reflection\n\nWhat are the dimensions of the mtcars dataset?\nCan you identify any categorical variables in the dataset? If so, which are they?\nWhat is the average (mean) value of the mpg (miles per gallon) column?\n\n\n\n\n\n\n\nExcercise 8: Click to see solution\n\n\n\n\n\nSolution\nLoad the Data\n\ndata(mtcars)\n\nView the Data\nTo view the first few rows of the dataset, use the head() function.\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\nSummarize the Data\nFor a statistical summary of the dataset, use the summary() function.\n\nsummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\nExplore the Data Structure\nTo understand the structure of the dataset, use the str() function.\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nDetermine the Data Dimensions\nThe dim() function provides the dimensions of the dataset.\n\ndim(mtcars)\n\n[1] 32 11\n\n\nRetrieve the Column Names\nUse the names() function to get the column names.\n\nnames(mtcars)\n\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n\n\nIdentify the Data Type\nThe class() function reveals the data type of the dataset.\n\nclass(mtcars)\n\n[1] \"data.frame\"\n\n\nQuestions for Reflection\nDimensions of the mtcars Dataset:\nUse dim(mtcars) to find the dimensions. The mtcars dataset has 32 rows (cars) and 11 columns (variables).\nCategorical Variables:\nBy examining the dataset using str(mtcars) or summary(mtcars), you can identify that the mtcars dataset does not explicitly contain categorical variables as all columns are either integer or numeric. However, some variables like gear and cyl (number of gears and cylinders, respectively) can be considered as categorical in certain contexts.\nAverage Value of MPG:\nTo find the average value of the mpg column, use the mean() function.\n\nmean(mtcars$mpg)\n\n[1] 20.09062"
  },
  {
    "objectID": "sessions/basic-import.html#missing-data",
    "href": "sessions/basic-import.html#missing-data",
    "title": "7  Basic Data Import",
    "section": "7.3 Missing Data",
    "text": "7.3 Missing Data\nMissing data is a prevalent issue in real-world datasets, arising from various sources like data entry errors, equipment malfunctions, or participant dropout in studies. It poses challenges for many machine learning algorithms, which often require complete datasets. Thus, identifying and handling missing data is a crucial step in data analysis.\nWe will demonstrate how to identify missing data in R using the airquality dataset, which records daily air quality measurements in New York from May to September 1973.\n\n\n\n\n\n\nTip\n\n\n\nTo begin, load the airquality dataset into your R environment using the data(airquality) function.\n\n\n\n7.3.1 Identifying Missing Data\nUsing the is.na() Function\nThe is.na() function in R helps in checking for missing values. It returns a logical vector where each value is TRUE if it’s missing (NA), and FALSE otherwise.\n\n# Check for missing values in the airquality dataset\nmissing_values &lt;- is.na(airquality)\n\n\nhead(missing_values)\n\n     Ozone Solar.R  Wind  Temp Month   Day\n[1,] FALSE   FALSE FALSE FALSE FALSE FALSE\n[2,] FALSE   FALSE FALSE FALSE FALSE FALSE\n[3,] FALSE   FALSE FALSE FALSE FALSE FALSE\n[4,] FALSE   FALSE FALSE FALSE FALSE FALSE\n[5,]  TRUE    TRUE FALSE FALSE FALSE FALSE\n[6,] FALSE    TRUE FALSE FALSE FALSE FALSE\n\n\nCounting missing values in a specific column\n\n# Counting missing values in specific columns of the airquality dataset\nnum_missing_ozone &lt;- sum(is.na(airquality$Ozone))\nnum_missing_ozone\n\n[1] 37\n\n\nfunction sum() is used to count the number of missing values in the Ozone column.\n\nnum_missing_solarR &lt;- sum(is.na(airquality$Solar.R))\nnum_missing_solarR\n\n[1] 7\n\n\nCounting missing values in each column\n\n# Counting missing values in each column of the dataset\ncol_missing_values &lt;- colSums(is.na(airquality))\ncol_missing_values\n\n  Ozone Solar.R    Wind    Temp   Month     Day \n     37       7       0       0       0       0 \n\n\nfunction colSums() is used to count the number of missing values in each column of the dataset.\n\n# Counting the number of columns with missing values\nnum_cols_missing &lt;- sum(col_missing_values &gt; 0)\n\nCounting missing values in each row\n\n# Counting missing values in each row of the dataset\nrow_missing_values &lt;- rowSums(is.na(airquality))\n\nfunction rowSums() is used to count the number of missing values in each row of the dataset.\n\nhead(row_missing_values)\n\n[1] 0 0 0 0 2 1\n\n\n\n# Counting the number of rows with missing values\nnum_rows_missing &lt;- sum(row_missing_values &gt; 0)\n\n\nnum_rows_missing\n\n[1] 42\n\n\n\n# Counting the number of rows with no missing values\nnum_rows_complete &lt;- sum(row_missing_values == 0)\n\n\nnum_rows_complete\n\n[1] 111\n\n\n\n\n7.3.2 Handling Missing Data\nAfter identifying missing data, you can decide how to handle it. Common strategies include:\n1 Removing Rows or Columns: If a column or row has too many missing values, it might be best to exclude it from analysis.\n2 Imputing Values: You can fill in missing values with estimates, such as the mean or median of the column.\nWhen a column or row in your dataset has too many missing values, it might be impractical to impute them. In such cases, you might choose to remove these rows or columns from your analysis.\nRemoving Rows\nTo remove rows with any missing values:\n\n# Removing rows with any missing values\nairquality_clean &lt;- na.omit(airquality)\n\nRemoving Columns To remove columns with any missing values:\n\n# Define a threshold for removal (e.g., 50% missing values)\nthreshold &lt;- 0.5 * nrow(airquality)\n\n# Removing columns with missing values above the threshold\nairquality_clean &lt;- airquality[, colSums(is.na(airquality)) &lt; threshold]\n\nImputing Values Instead of removing missing data, another approach is to fill in the missing values with estimates. This process is known as imputation. Common methods include using the mean, median, or a predictive model to estimate the missing values.\nImputing with Mean or Median\n\n# Impute missing values in the Ozone column with the mean\nairquality$Ozone[is.na(airquality$Ozone)] &lt;- mean(airquality$Ozone, na.rm = TRUE)\n\nAlternatively, you can use the median, which is less sensitive to outliers:\n\n# Impute missing values in the Ozone column with the median\nairquality$Ozone[is.na(airquality$Ozone)] &lt;- median(airquality$Ozone, na.rm = TRUE)"
  },
  {
    "objectID": "sessions/basic-visualization.html#introduction-to-ggplot2",
    "href": "sessions/basic-visualization.html#introduction-to-ggplot2",
    "title": "8  Basic Data Visualization",
    "section": "8.1 Introduction to ggplot2",
    "text": "8.1 Introduction to ggplot2\n\n8.1.1 What is ggplot2?\nggplot2 is one of the most powerful and flexible tools for data visualization in R. Part of the tidyverse collection of packages, ggplot2 is based on the Grammar of Graphics, a framework for creating graphics in a structured and intuitive manner. With ggplot2, you can create a wide range of static and interactive plots, from simple scatter plots to complex multi-layered graphics.\n\n\n8.1.2 Key Features of ggplot2\n1- Layered Approach: ggplot2 uses a layering system, allowing you to add elements to a plot incrementally. Each layer can consist of data points, statistical summaries, axes, legends, and more. 2- Aesthetic Mappings: You can map variables in your data to visual properties (aesthetics) like color, size, and shape. 3- Extensible: ggplot2 can be easily extended with numerous add-on packages, making it adaptable to a wide range of visualization needs. 4- Theme System: Customize the appearance of your plots with adjustable themes.\n\n\n\n\n\n\nNote\n\n\n\nBefore using ggplot2, it must be installed and loaded into your R environment. To install ggplot2, use the command install.packages(\"ggplot2\"). To load ggplot2, use the command library(ggplot2).\n\n\nCertainly! Here’s how you would format the content about basic data visualization with ggplot2 in Quarto:"
  },
  {
    "objectID": "sessions/basic-visualization.html#creating-simple-plots",
    "href": "sessions/basic-visualization.html#creating-simple-plots",
    "title": "8  Basic Data Visualization",
    "section": "8.2 Creating Simple Plots",
    "text": "8.2 Creating Simple Plots\n\n8.2.1 Understanding the Basic Plot Structure in ggplot2\nIn this section, we delve into the basics of data visualization using ggplot2 in R. ggplot2 allows us to transform data into informative and compelling visual narratives, similar to how a painter brings a canvas to life.\nThe Three Pillars of a ggplot2 Plot:\n\nData: The foundation of every ggplot2 plot is your data. This is akin to the canvas for a painter, where your dataset provides the variables to be visualized.\nAesthetics (aes): Aesthetics are the visual properties that represent your data, such as color, size, and shape. Think of these as the palette of colors you choose to represent different aspects of your data.\nGeometries (geom_): These are the types of plots you can create, like scatter plots, bar charts, etc. Each geom_ function in ggplot2 is a different way to visually represent your data.\n\n\n\n8.2.2 Making a Scatter Plot\nData Preparation\nConsider a dataset df with two numeric variables, x and y, representing coordinates on a graph.\n\n# Create a dataframe with two numeric variables\ndf &lt;- data.frame(x = c(1, 2, 3, 4, 5),\n                 y = c(1, 2, 3, 4, 5))\n\nPlot Creation\nTo create a scatter plot, we use geom_point(), which plots points for each data pair in df.\n\n# Create a scatter plot\nggplot(df, aes(x = x, y = y)) +\n  geom_point()\n\n\n\n\nCustomizing Your Plot\n*Adding Titles and Labels\nAdding a title and axis labels helps in providing context and making the plot informative.\n\nggplot(df, aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"My Scatter Plot\",\n       x = \"X Axis\",\n       y = \"Y Axis\")\n\n\n\n\nColor and Size Customizations\nModifying the color and size of points can highlight specific aspects of the data.\n\nggplot(df, aes(x = x, y = y)) +\n  geom_point(color = \"red\", size = 3)"
  },
  {
    "objectID": "sessions/basic-visualization.html#examples-of-plots-types-with-iris-dataset",
    "href": "sessions/basic-visualization.html#examples-of-plots-types-with-iris-dataset",
    "title": "8  Basic Data Visualization",
    "section": "8.3 Examples of Plots types with iris dataset",
    "text": "8.3 Examples of Plots types with iris dataset\n\n8.3.1 Scatter Plot\nA scatter plot is ideal for visualizing the relationship between two continuous variables. For the iris dataset, we can plot sepal length against sepal width.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point() +\n  ggtitle(\"Scatter Plot of Sepal Dimensions\") +\n  xlab(\"Sepal Length\") +\n  ylab(\"Sepal Width\")\n\n\n\n\n\n\n8.3.2 Line Plot\nLine plots are great for showing trends over a variable, usually time. However, as the iris dataset doesn’t contain a time variable, we can use it to show how sepal length varies with sepal width for different species, using species as a grouping variable.\n\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_line() +\n  ggtitle(\"Line Plot of Sepal Dimensions\") +\n  xlab(\"Sepal Length\") +\n  ylab(\"Sepal Width\")\n\n\n\n\n\n\n8.3.3 Bar Plot\nBar plots are used for categorical data. We can use it to show the count of iris for each species in the iris dataset.\n\nggplot(iris, aes(x = Species)) +\n  geom_bar(fill = \"green\", color = \"black\") +\n  ggtitle(\"Bar Plot of Species\") +\n  xlab(\"Species\") +\n  ylab(\"Count\")\n\n\n\n\n\n\n8.3.4 Histogram\nHistograms are used to visualize the distribution of a single continuous variable. Let’s create a histogram for sepal length.\n\nggplot(iris, aes(x = Sepal.Length)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  ggtitle(\"Histogram of Sepal Length\") +\n  xlab(\"Sepal Length\") +\n  ylab(\"Count\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n8.3.5 Boxplot\nBoxplots are useful for showing the distribution of a continuous variable and detecting outliers. We can create a boxplot for sepal width across the different species.\n\nggplot(iris, aes(x = Species, y = Sepal.Width)) +\n  geom_boxplot(fill = \"orange\", color = \"black\") +\n  ggtitle(\"Boxplot of Sepal Width\") +\n  xlab(\"Species\") +\n  ylab(\"Sepal Width\")\n\n\n\n\nThese examples illustrate the basic types of plots you can create using ggplot2 and the iris dataset. Each type of plot serves a different purpose and can provide various insights into your data. Remember, the key to effective data visualization is choosing the right type of plot for your data and the story you want to tell."
  },
  {
    "objectID": "sessions/basic-visualization.html#excercise-9",
    "href": "sessions/basic-visualization.html#excercise-9",
    "title": "8  Basic Data Visualization",
    "section": "8.4 Excercise 9",
    "text": "8.4 Excercise 9\nTasks\n\nLoad the ggplot2 package using the command library(ggplot2).\nExplore the mtcars dataset by viewing the first few rows using head(mtcars). Understand the variables like mpg (miles per gallon), cyl (number of cylinders), hp (horsepower), etc.\nCreate a Scatter Plot:\n\n\nPlot mpg against hp (miles per gallon vs. horsepower).\nUse ggplot() function with aes(x = hp, y = mpg) to specify aesthetics.\nAdd geom_point() to create the scatter plot.\nOptionally, add labs(title = “MPG vs Horsepower”, x = “Horsepower”, y = “Miles per Gallon”) to add labels and a title to your plot.\n\n\nCreate a Box Plot:\n\n\nCreate a box plot to visualize the distribution of mpg across different numbers of cyl (cylinders).\nUse ggplot() with aes(x = factor(cyl), y = mpg).\nAdd geom_boxplot() to create the box plot.\nOptionally, add labels and a title as in the previous step.\n\n\nBonus Task:\n\n\nExperiment with customizing your plots. Try changing the color of the points in the scatter plot or the fill color of the box plot. Use color or fill arguments within geom_point() or geom_boxplot()\n\n\n\n\n\n\n\nExcercise 9: Click to see solution\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\n\n\n\n\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\n\n\nggplot(mtcars, aes(x = hp, y = mpg)) +\n  geom_point() +\n  labs(title = \"MPG vs Horsepower\",\n       x = \"Horsepower\",\n       y = \"Miles per Gallon\")\n\n\n\n\n\n\n\n\nggplot(mtcars, aes(x = factor(cyl), y = mpg)) +\n  geom_boxplot() +\n  labs(title = \"MPG vs Cylinders\",\n       x = \"Cylinders\",\n       y = \"Miles per Gallon\")\n\n\n\n\n\n\n\n\nggplot(mtcars, aes(x = hp, y = mpg)) +\n  geom_point(color = \"red\") +\n  labs(title = \"MPG vs Horsepower\",\n       x = \"Horsepower\",\n       y = \"Miles per Gallon\")\n\n\n\n\n\nggplot(mtcars, aes(x = factor(cyl), y = mpg, fill = factor(cyl))) +\n  geom_boxplot() +\n  labs(title = \"MPG Distribution Across Cylinder Counts\", \n       x = \"Number of Cylinders\", \n       y = \"Miles per Gallon\") +\n  scale_fill_brewer(palette = \"Pastel1\")"
  },
  {
    "objectID": "sessions/help-docs.html#accessing-help-files",
    "href": "sessions/help-docs.html#accessing-help-files",
    "title": "9  Help and Documentation",
    "section": "9.1 Accessing Help Files",
    "text": "9.1 Accessing Help Files\nIn R, every function and package comes with a help file that explains its usage, arguments, and provides examples. These files are invaluable for learning how to use different functions correctly.\n\n9.1.1 How to Access Help Files:\n\nUsing ? Operator: The simplest way to access help for a function is by using the ? operator followed by the function name. For example, ?mean will open the help file for the mean function.\nUsing help() Function: Alternatively, you can use the help() function. For example, help(mean) achieves the same as ?mean.\nHelp for Packages: To view documentation for a whole package, use help(package = \"packageName\"). Replace \"packageName\" with the name of the package you’re interested in.\n\n\n\n9.1.2 Tips for Navigating Help Files:\n\nArguments: Pay attention to the ‘Arguments’ section to understand what inputs the function accepts.\nExamples: The ‘Examples’ section is great for seeing how the function works in practice.\nSee Also: This section provides links to related functions and documentation."
  },
  {
    "objectID": "sessions/help-docs.html#searching-for-r-documentation",
    "href": "sessions/help-docs.html#searching-for-r-documentation",
    "title": "9  Help and Documentation",
    "section": "9.2 Searching for R Documentation",
    "text": "9.2 Searching for R Documentation\nSometimes you might not remember the exact name of a function or you’re looking for functions related to a specific task. Here’s how to search effectively:\n\nUsing ?? Operator: This is a broader search than ?. For example, ??regression will return a list of help files related to regression.\nUsing help.search() Function: This works similarly to ??. For example, help.search(\"regression\") will search for “regression” in the R documentation.\nOnline Resources: Websites like RDocumentation or CRAN provide searchable databases of R documentation.\n\n\n9.2.1 Tips for Effective Searching:\n\nUse Keywords: Think about the keywords related to what you’re trying to find.\nExplore Related Functions: Often, searching will lead you to related functions that might be useful.\nCheck Online Communities: Forums like Stack Overflow have a wealth of information and examples.\n\nMastering the use of help files and knowing how to search the R documentation effectively will significantly enhance your ability to learn and solve problems in R. Remember, seeking help is an integral part of the learning process, and these tools are there to assist you every step of the way.\n\n\n\n\n\n\nTip\n\n\n\nAlways explore the examples given in the help files, as they often provide practical insights into how functions can be used."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Getting Started with R",
    "section": "",
    "text": "Attribution 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public: \nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter’s License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "appendix/references.html",
    "href": "appendix/references.html",
    "title": "Appendix B — References",
    "section": "",
    "text": "R Core Team. (2023). R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://www.R-project.org/.\nWickham, H., & Grolemund, G. (2017). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly Media, Inc. https://r4ds.had.co.nz/.\nChang, W. (2018). R Graphics Cookbook: Practical Recipes for Visualizing Data. O’Reilly Media. https://r-graphics.org/.\nRStudio Team. (2023). RStudio: Integrated Development Environment for R. RStudio, PBC. http://www.rstudio.com/.\nWickham, H. (2016). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2-book.org/.\nWickham, H. (2017). readr: Read Rectangular Text Data. R package version 1.3.1. https://CRAN.R-project.org/package=readr.\nFisher, R. A. (1936). The use of multiple measurements in taxonomic problems. Annals of Eugenics, 7(2), 179-188. (Original description of the iris dataset).\nHenderson, H. V., & Velleman, P. F. (1981). Building multiple regression models interactively. Biometrics, 37, 391-411. (Description of the mtcars dataset).\nMatloff, N. (2011). The Art of R Programming: A Tour of Statistical Software Design. No Starch Press. https://nostarch.com/artofr.htm.\nTeetor, P. (2011). R Cookbook: Proven Recipes for Data Analysis, Statistics, and Graphics. O’Reilly Media.\nStack Overflow - R Tag. Community-based Q&A for R programming. https://stackoverflow.com/questions/tagged/r.\nCRAN (Comprehensive R Archive Network). Source for R packages and documentation. https://cran.r-project.org/."
  }
]